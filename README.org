#+TITLE: A*PA: A* Pairwise Aligner
#+PROPERTY: header-args :eval no-export :exports results

A global pairwise sequence aligner using A*. Co-authored by [[https://github.com/pesho-ivanov][@pesho-ivanov]] and [[https://github.com/RagnarGrootKoerkamp][@RagnarGrootKoerkamp]].

An alignment of two sequences of length 500 with 30% error rate:

[[file:imgs/readme/layers.gif]]

- Citations ::
  Please cite the Bioinformatics paper. The bioRxiv version includes the
  supplement and has slightly nicer formatting.
  - BioRxiv preprint:

    *Ragnar Groot Koerkamp*, *Pesho Ivanov*.
    "Exact global alignment using A* with chaining seed heuristic and match pruning".
    bioRxiv (2024). [[https://doi.org/10.1101/2022.09.19.508631][10.1101/2022.09.19.508631]]
  - OUP Bioinformatics paper:

    *Ragnar Groot Koerkamp*, *Pesho Ivanov*.
    "Exact global alignment using a* with chaining seed heuristic and match pruning".
    Bioinformatics (2024). [[https://doi.org/10.1093/bioinformatics/btae032][10.1093/bioinformatics/btae032]]
- Links ::
  - Twitter: [[https://mobile.twitter.com/curious_coding][@curious_coding]], [[https://mobile.twitter.com/peshotrie][@peshotrie]],
  - Matrix: =@curious_coding:matrix.org=,
  - Blog: [[https://research.curiouscoding.nl]]
- Disclaimer ::
  A*PA can be slow and/or go out of memory when the error rate is high (>10%) or when long indels are present. You could try
  lower/higher =k=, and more/less pruning, but otherwise use Edlib or BiWFA.

* Usage
If you run into any kind of problem, please (/please/ ðŸ¥º) make an issue or
reach out on twitter or matrix.

** Installation
First [[https://rustup.rs/][install rustup]]. Then enable ~nightly~: ~rustup install nightly; rustup default nightly~.

To run from the repository: clone and ~cargo run --release -- <pa-bin flags>~.

To just install a binary (no cloning needed):
#+begin_src shell
cargo install --git https://github.com/RagnarGrootKoerkamp/astar-pairwise-aligner pa-bin
#+end_src
installs =pa-bin= to =~/.local/share/cargo/bin/pa-bin=.

** Visualizations
Visualizations use the =sdl2= library and =ttf= fonts. If this gives errors, either:
- install =sdl2=: e.g. ~apt-get install libsdl2-ttf-dev~;
- disable visuals by passing =--no-default-features= to =cargo run= or =cargo install=.

** Command line application
#+begin_src shell :exports both :results verbatim
cargo run --release -- -h
#+end_src

#+RESULTS:
#+begin_example
Globally align pairs of sequences using A*PA

Usage: pa-bin [OPTIONS] <--input <INPUT>|--length <LENGTH>>

Options:
  -i, --input <INPUT>    A .seq, .txt, or Fasta file with sequence pairs to align
  -o, --output <OUTPUT>  Write a .csv of `{cost},{cigar}` lines
      --no-dt            Do not use the diagonal-transition optimization
  -s, --silent...        Print less stats. Pass twice for summary line only
  -h, --help             Print help (see more with '--help')

Heuristic:
  -H, --heuristic <HEURISTIC>  [default: gcsh] [possible values: none, zero, gap, sh, csh, gcsh,
                               gap-cost, affine]
  -r <r>                       Seed potential [default: 2]
  -k <k>                       Seed length [default: 15]
      --prune <PRUNE>          [default: start] [possible values: none, start, end, both]

Generated input:
  -n, --length <LENGTH>          Target length of each generated sequence [default: 1000]
  -e, --error-rate <ERROR_RATE>  Error rate between sequences [default: 0.05]

Visualizer:
  -v, --visualize <WHEN>  Interactive visualizer. See --help for more [default: none] [possible
                          values: none, first, last, all, layers]
#+end_example

*** Examples
Align all consecutive pairs in a file, and write cigar strings to a =csv=
containing lines of ~<cost>,<cigar>~.
#+begin_src
pa-bin -i <path/to/file.{fasta,fa,txt,seq}> -o cigars.csv
#+end_src
Run on 100 random sequences of length 10^5 with error rate 5%:
#+begin_src
pa-bin --cnt 100 -n 100000 -e 0.05
#+end_src
Show a video of a small alignment (requires ~--features vis~):
#+begin_src sh
pa-bin -n 100 -e 0.10 -v all --style detailed
#+end_src
Save an image of a large alignment to disk:
#+begin_src sh
pa-bin -i <input> --draw Layers --save-last --save-path alignment --style large
#+end_src

*** Unpublished features
- Pass  ~--max-matches <num>~ to use variable length seeds with at most ~<num>~
  matches per seed.  ~--kmin <kmin>~, ~--kmax <kmax>~ are sometimes needed to
  constrain seed lengths.
- Pass ~--skip-prune <N>~ to skip pruning every ~N~'th match that would
  otherwise be pruned. This can speed up pruning when there are a lot of matches.

** Rust API
The ~astarpa~ crate is the [[file:astarpa/src/lib.rs][main entrypoint]]. See the docs there.
Use ~astarpa::astarpa(a, b)~ for alignment with default settings or
~astarpa::astarpa_gcsh(a,b,r,k,end_pruning)~ to use GCSH+DT with custom parameters.

Examples of more advanced usages using the ~AstarPa~ aligner object can be found at [[file:pa-bin/examples/][pa-bin/examples]].

** C API
The ~astarpa-c~ [[file:astarpa-c/astarpa.h][crate]] contains simple C-bindings for the
~astarpa::{astarpa,astarpa_gcsh}~ functions and an [[file:astarpa-c/example.c][example]] with [[file:astarpa-c/makefile][makefile]]. More should not be needed for
simple usage.

* Visualization

Only A*PA itself can be visualized using the binary. Reimplementations of
Needleman-Wunsch, band-doubling (Edlib), and diagonal-transition (WFA, BiWFA)
are available in the ~pa-base-algos~ crate and can only be called from code;
see the [[file:pa-bin/examples/paper-figures/intro.rs][examples]].

Sample videos corresponding to figure 1 of the paper are below. Timings are not
comparable due to differences in visualization strategies (cell vs layer updates).

|----------------------------------------------------------------------+----------------------------------------------------------------------------|
| Dijkstra [[file:imgs/readme/2_dijkstra.gif]]                             | Ukkonen's exponential search (Edlib) [[file:imgs/readme/1_ukkonen.gif]]        |
| Diagonal transition (WFA) [[file:imgs/readme/3_diagonal_transition.gif]] | DT + Divide & Conquer (BiWFA) [[file:imgs/readme/4_dt-divide-and-conquer.gif]] |
| A*PA (GCSH+DT) [[file:imgs/readme/5_astarpa.gif]]                        |                                                                            |

* Paper artefacts
- Figures ::
  Paper figures are generated using the example binaries at [[file:pa-bin/examples/paper-figures/][pa-bin/examples/paper-figures]].

- Evals ::
  Benchmarking code, evals, and datasets have moved to [[https://github.com/pairwise-alignment/pa-bench][pa-bench]].
  Results can be found in [[https://github.com/pairwise-alignment/pa-bench/blob/main/evals/astarpa/evals.ipynb][this notebook]] and reproduced using [[https://github.com/pairwise-alignment/pa-bench/blob/main/evals/astarpa/makefile][this makefile]].
  Dataset downloads are in [[https://github.com/pairwise-alignment/pa-bench/releases/tag/datasets][this release]].

- Tests ::
  Code is tested for correctness in various tests ([[file:astarpa/src/tests.rs][astarpa/src/tests.rs]])
  against ~triple-accel~. The benchmark tool [[https://github.com/pairwise-alignment/pa-bench][pa-bench]] also checks correctness automatically.

- Benchmarks ::
  The code is benchmarked on GitHub Actions CI. Performance history of
  benchmarks is [[https://ragnargrootkoerkamp.github.io/astar-pairwise-aligner/dev/bench/][here]].

* Crate structure

Code is spread out over multiple crates.
From low to high:
- ~pa-types~: Basic types such as ~Seq~, ~Pos~, ~Cigar~, and ~Cost~, hosted in
  the ~pairwise-alignment~ org.
- ~pa-affine-types~: Types for affine edit graphs such as
   ~State = (Pos, Layer)~, ~AffineCigar~, and ~CostModel~. Not used by A*PA, but other
  algorithms and the visualizer support it.
- ~pa-heuristic~: Code for
  - finding matches
  - computing contours (fast and bruteforce)
  - heuristics themselves
  - wrapper/bruteforce heuristics for debugging
- ~pa-vis-types~: Trait definition of the visualizer callbacks, and the empty ~NoVis~ visualizer.
- ~astarpa~: Main A*PA API entrypoint containing the ~astar~ and ~astar_dt~
  functions, the ~bucket_queue~ data structure, and the ~astarpa(a,b)~ entrypoint.
- ~astarpa-c~: C-bindings for ~astarpa~
- ~pa-vis~: The visualizer. Contains a ~Canvas~ trait implemented for the
  ~SDL2Canvas~. The ~sdl2~ feature is optional.
- ~pa-generate~: Library and binary to generate different types of random sequences.
- ~pa-bin~: Main command line interface to A*PA. Allows for input from file,
  generated input, visualizing, and customization of the A*PA parameters.
- ~pa-web~: web-interface to A*PA by compiling to webassembly. Implements the
  ~Canvas~ trait for ~HTMLCanvas~. (Not maintained.)
- ~pa-base-algos~: Re-implementations of Needleman-Wunsch/Edlib and
  Diagonal-transition/WFA/BiWFA for visualizations. Also playground for new A*PA
  variants such as [[https://curiouscoding.nl/posts/local-doubling/][local doubling]].
- ~astarpa-next~: Some code for other new ideas such as [[https://curiouscoding.nl/posts/speeding-up-astar/][pre-pruning]].

#+begin_src shell :results file :file imgs/readme/depgraph.svg :exports results
cargo depgraph --dedup-transitive-deps \
    --include pa-generate,pa-bin,pa-vis,astarpa,pa-types,pa-affine-types,sdl2,pa-base-algos,pa-web,web-sys,pa-heuristic,pa-vis-types,astarpa-c,astarpa-next \
    | dot -T svg
#+end_src

#+RESULTS:
[[file:imgs/readme/depgraph.svg]]

* License
MPL-2.0
