#+TITLE: A*PA: A* Pairwise Aligner

A pairwise sequence aligner using A*, extending the seed heuristic from [[https://github.com/eth-sri/astarix][AStarix]].

Co-authored by [[https://github.com/pesho-ivanov][@pesho-ivanov]] and [[https://github.com/RagnarGrootKoerkamp][@RagnarGrootKoerkamp]].

- Links ::
  - Twitter: [[https://mobile.twitter.com/curious_coding][@curious_coding]], [[https://mobile.twitter.com/peshotrie][@peshotrie]],
  - Blog: [[https://research.curiouscoding.nl]]
- Citation ::
  Groot Koerkamp, Ivanov (2022, preprint)
  Exact pairwise alignment using A* with seed heuristic and match pruning

Here's an alignment of two sequences of length $500$ with $30\%$ error rate
using the /chaining seed heuristic/ with /pruning/:
[[file:imgs/fig-readme.gif]]


* Getting started

** Installing Rust

1. Install [[https://rustup.rs/][rustup]].
2. Install Rust Nightly using ~rustup install nightly~
3. Make nightly the default: ~rustup default nightly~

** Usage

- ~cargo run -- -h~ for the help below
- ~cargo run -- --help~ for more flags/features not in the paper.

#+begin_src shell
USAGE:
    astar-pairwise-aligner [OPTIONS] <--input <INPUT>|--length <LENGTH>>

OPTIONS:
    -h, --help               Print help information
    -o, --output <OUTPUT>    Where to write optional statistics
    -s, --silent             Print less. Pass twice for summary line only

INPUT:
    -i, --input <INPUT>              The .seq, .txt, or Fasta file with sequence pairs to align
    -x, --cnt <CNT>                  The number of sequence pairs to generate [default: 1]
    -n, --length <LENGTH>            Length of generated sequences
    -e, --error-rate <ERROR_RATE>    Input error rate
        --seed <SEED>                Seed to initialize RNG for reproducability

ALGORITHM:
    -a, --algorithm <ALGORITHM>    [default: a-star] [possible values: nw, dt, a-star, nw-lib, nw-lib-simd, edlib, wfa, biwfa]

HEURISTIC:
    -H, --heuristic <HEURISTIC>    [default: sh] [possible values: dijkstra, sh, csh]
    -k <k>                         Seed length [default: 15]
    -r <r>                         Seed potential [default: 2]

VISUALIZER:
    -v, --visualize [<WHEN>...]    Run the interactive visualizer. See --help for controls. [default: all] [possible values: none, last, all, layers]
        --style <STYLE>            Visualizer style [default: default] [possible values: default, large, detailed]
        --save [<WHEN>...]         Which frames to save [possible values: none, last, all, layers]
        --save-path <PATH>         Where to save
#+end_src

*Input* can be a file (~--input file.{fasta,txt,seq}~) or randomly generated (~--length <n> --error-rate <e>~).

The *heuristic* can be changed between /seed heuristic/ (~-H sh~) and /chaining
seed heuristic/ (~-H csh~).
*Parameters* ~-r~ and ~-k~ can be specified if non-default values are needed.

** Examples

To align all consecutive pairs in a file:
#+begin_src
cargo run --release -- -i <path/to/file.{fasta,fa,txt,seq}>
#+end_src
To run on $100$ random sequences of length $10^5$ with error rate $5\%$:
#+begin_src
cargo run --release -- -x 100 -n 100000 -e 0.05
#+end_src

To generate a =.seq= dataset:
#+begin_src
cargo run --release --bin generate_dataset -- -x 1000 -n 10000 -e 0.05 /tmp/random-sequences.seq
#+end_src

** Feature flags

- Visualizations ::
    Enable the =sdl2= feature flag ([[./Cargo.toml][Cargo.toml]]) to use visualizations.
    This requires the =sdl2= library to be installed on the system.
    To draw contour numbers, the =sdl2-ttf= library/flag is needed.

- Edlib, WFA ::
    The =edlib= and =wfa= features enable linking directly against
    the C-libraries. Run ~make wfa~ and ~make edlib~ before using these.

    This enables the ~--algorithm {edlib,wfa,biwfa}~ options to align using those
    libraries.

* Evals

The evaluations and results in our preprint are entirely reproducible using the [[./makefile][makefile]]:

- Synthetic data ::
  1. Clone WFA and Edlib repos using ~make wfa~ and ~make edlib~ from this directory.
  2. Run the synthetic evals (~5h~) using ~make evals~ to write data tables to
  [[./evals/table/]]. Data used in the paper is already committed.
  1. Write plots to [[./evals/results/]] using ~make results~ or [[./evals/results.py]]
  directly. An interactive notebook is at [[./evals/evals.ipynb]].

- Human data ::
  1. Download the dataset from the [[https://github.com/RagnarGrootKoerkamp/astar-pairwise-aligner/releases/tag/datasets][sequence data release]] and unzip the
     files to ~./evals/human/{chm13,na12878}/seq<id>.seq~.

     The CHM13 set was created using the steps in [[./evals/human/Snakefile]].
  2. Run ~make evals-human~ (~1-2h~) and ~make results~.


* Videos

We have support for live-rendering of the progress of all internally implemented
algorithm. However, this is not currently exposed as a binary. See e.g.
[[./examples/fig-readme.rs]] for an example. If you run it, you may want to first
set ~config.save = When::None~ to prevent saving (a lot) of frames to disk.

Here are the algorithms of figure 1 of our (upcoming) preprint visualized. Note
that timings are not comparable since different methods are drawing are used --
the timescales and number of frames are too different. Dijkstra's
algorithm and diagonal transition are shown per-front, instead of per cell, so
are not linear with time.

|----------------------------------------------------------------------------------+--------------------------------------------|
| The exponential search steps of Ukkonen's banded algorithm                       | [[file:imgs/fig1/1_ukkonen.gif]]               |
| Fronts of Dijkstra's algorithm                                                   | [[file:imgs/fig1/2_dijkstra.gif]]              |
| Fronts of Diagonal transition (Ukkonen'85, Myers'86, WFA)                        | [[file:imgs/fig1/3_diagonal_transition.gif]]   |
| Fronts of Diagonal transition with divide and conquer (Myers'86, BiWFA)          | [[file:imgs/fig1/4_dt-divide-and-conquer.gif]] |
| Expanded states of A* with chaining seed heuristic and pruning (A*PA, this work) | [[file:imgs/fig1/5_astar-csh-pruning.gif]]     |

And here is a video of figure 3 of our preprint:

[[file:imgs/fig3.gif]]

* Tests & benchmarks

All code is tested and benchmarked on GitHub Actions CI. Performance history of
benchmarks is [[https://ragnargrootkoerkamp.github.io/astar-pairwise-aligner/dev/bench/][here]].

The [[./src/aligners/]] directory contains our own implementations of
many algorithms:
- Needleman-Wunsch,
- Exponential banded search (Ukkonen),
- /Computational domains/ of Spouge (1989),
- Diagonal Transition (WFA)
  - With optional divide & conquer (BiWFA).
All of these support the following cost models:
- unit costs
- linear costs
- affine costs
- dual (and more) affine costs
- and asymmetric variants of all of the above with distinct insert and delete costs.

We also include wrappers for the following:
- NW and Ukkonen's exponential search from
  the [[https://docs.rs/triple_accel/latest/triple_accel/index.html][triple accel]] crate,
- [[https://github.com/Martinsos/edlib][Edlib]]
- [[https://github.com/smarco/WFA2-lib][WFA2]]
- our own A* based aligner.

All these methods are tested in [[./src/aligners/tests.rs]].

Note that we do not currently expose these via a command line utility. See the
tests file above for usage examples.


* License
MPL-2.0
