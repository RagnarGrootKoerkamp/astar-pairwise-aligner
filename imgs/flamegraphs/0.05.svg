<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (6 samples, 0.19%)</title><rect x="0.0000%" y="821" width="0.1949%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="831.50"></text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (23 samples, 0.75%)</title><rect x="0.4222%" y="805" width="0.7470%" height="15" fill="rgb(217,0,24)"/><text x="0.6722%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as astar_pairwise_aligner::datastructures::diagonal_map::DiagonalMapTrait&lt;astar_pairwise_aligner::alignment_graph::Pos,V&gt;&gt;::get_mut (4 samples, 0.13%)</title><rect x="1.0393%" y="789" width="0.1299%" height="15" fill="rgb(221,193,54)"/><text x="1.2893%" y="799.50"></text></g><g><title>[[stack]] (37 samples, 1.20%)</title><rect x="0.1949%" y="821" width="1.2017%" height="15" fill="rgb(248,212,6)"/><text x="0.4449%" y="831.50"></text></g><g><title>[anon] (15 samples, 0.49%)</title><rect x="1.3966%" y="821" width="0.4872%" height="15" fill="rgb(208,68,35)"/><text x="1.6466%" y="831.50"></text></g><g><title>rand::rng::Rng::gen_range (15 samples, 0.49%)</title><rect x="1.3966%" y="805" width="0.4872%" height="15" fill="rgb(232,128,0)"/><text x="1.6466%" y="815.50"></text></g><g><title>[astar-pairwise-aligner] (14 samples, 0.45%)</title><rect x="1.8837%" y="821" width="0.4547%" height="15" fill="rgb(207,160,47)"/><text x="2.1337%" y="831.50"></text></g><g><title>rand::rng::Rng::gen_range (13 samples, 0.42%)</title><rect x="1.9162%" y="805" width="0.4222%" height="15" fill="rgb(228,23,34)"/><text x="2.1662%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::is_empty (10 samples, 0.32%)</title><rect x="2.0136%" y="789" width="0.3248%" height="15" fill="rgb(218,30,26)"/><text x="2.2636%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (10 samples, 0.32%)</title><rect x="2.0136%" y="773" width="0.3248%" height="15" fill="rgb(220,122,19)"/><text x="2.2636%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.23%)</title><rect x="2.3384%" y="821" width="0.2273%" height="15" fill="rgb(250,228,42)"/><text x="2.5884%" y="831.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::is_seed_start_or_end (18 samples, 0.58%)</title><rect x="2.6632%" y="805" width="0.5846%" height="15" fill="rgb(240,193,28)"/><text x="2.9132%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.19%)</title><rect x="3.2803%" y="805" width="0.1949%" height="15" fill="rgb(216,20,37)"/><text x="3.5303%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.19%)</title><rect x="3.2803%" y="789" width="0.1949%" height="15" fill="rgb(206,188,39)"/><text x="3.5303%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 0.19%)</title><rect x="3.2803%" y="773" width="0.1949%" height="15" fill="rgb(217,207,13)"/><text x="3.5303%" y="783.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair::{{closure}} (6 samples, 0.19%)</title><rect x="3.2803%" y="757" width="0.1949%" height="15" fill="rgb(231,73,38)"/><text x="3.5303%" y="767.50"></text></g><g><title>astar_pairwise_aligner::generate::rand_char (6 samples, 0.19%)</title><rect x="3.2803%" y="741" width="0.1949%" height="15" fill="rgb(225,20,46)"/><text x="3.5303%" y="751.50"></text></g><g><title>[libc.so.6] (15 samples, 0.49%)</title><rect x="3.4752%" y="805" width="0.4872%" height="15" fill="rgb(210,31,41)"/><text x="3.7252%" y="815.50"></text></g><g><title>main (13 samples, 0.42%)</title><rect x="3.5401%" y="789" width="0.4222%" height="15" fill="rgb(221,200,47)"/><text x="3.7901%" y="799.50"></text></g><g><title>std::rt::lang_start_internal (13 samples, 0.42%)</title><rect x="3.5401%" y="773" width="0.4222%" height="15" fill="rgb(226,26,5)"/><text x="3.7901%" y="783.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.42%)</title><rect x="3.5401%" y="757" width="0.4222%" height="15" fill="rgb(249,33,26)"/><text x="3.7901%" y="767.50"></text></g><g><title>std::panicking::try (13 samples, 0.42%)</title><rect x="3.5401%" y="741" width="0.4222%" height="15" fill="rgb(235,183,28)"/><text x="3.7901%" y="751.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.42%)</title><rect x="3.5401%" y="725" width="0.4222%" height="15" fill="rgb(221,5,38)"/><text x="3.7901%" y="735.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (13 samples, 0.42%)</title><rect x="3.5401%" y="709" width="0.4222%" height="15" fill="rgb(247,18,42)"/><text x="3.7901%" y="719.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.42%)</title><rect x="3.5401%" y="693" width="0.4222%" height="15" fill="rgb(241,131,45)"/><text x="3.7901%" y="703.50"></text></g><g><title>std::panicking::try (13 samples, 0.42%)</title><rect x="3.5401%" y="677" width="0.4222%" height="15" fill="rgb(249,31,29)"/><text x="3.7901%" y="687.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.42%)</title><rect x="3.5401%" y="661" width="0.4222%" height="15" fill="rgb(225,111,53)"/><text x="3.7901%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13 samples, 0.42%)</title><rect x="3.5401%" y="645" width="0.4222%" height="15" fill="rgb(238,160,17)"/><text x="3.7901%" y="655.50"></text></g><g><title>std::rt::lang_start::{{closure}} (13 samples, 0.42%)</title><rect x="3.5401%" y="629" width="0.4222%" height="15" fill="rgb(214,148,48)"/><text x="3.7901%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.42%)</title><rect x="3.5401%" y="613" width="0.4222%" height="15" fill="rgb(232,36,49)"/><text x="3.7901%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.42%)</title><rect x="3.5401%" y="597" width="0.4222%" height="15" fill="rgb(209,103,24)"/><text x="3.7901%" y="607.50"></text></g><g><title>astar_pairwise_aligner::main (13 samples, 0.42%)</title><rect x="3.5401%" y="581" width="0.4222%" height="15" fill="rgb(229,88,8)"/><text x="3.7901%" y="591.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair (13 samples, 0.42%)</title><rect x="3.5401%" y="565" width="0.4222%" height="15" fill="rgb(213,181,19)"/><text x="3.7901%" y="575.50"></text></g><g><title>ropey::rope::Rope::remove (13 samples, 0.42%)</title><rect x="3.5401%" y="549" width="0.4222%" height="15" fill="rgb(254,191,54)"/><text x="3.7901%" y="559.50"></text></g><g><title>ropey::rope::Rope::try_remove (13 samples, 0.42%)</title><rect x="3.5401%" y="533" width="0.4222%" height="15" fill="rgb(241,83,37)"/><text x="3.7901%" y="543.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (13 samples, 0.42%)</title><rect x="3.5401%" y="517" width="0.4222%" height="15" fill="rgb(233,36,39)"/><text x="3.7901%" y="527.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (13 samples, 0.42%)</title><rect x="3.5401%" y="501" width="0.4222%" height="15" fill="rgb(226,3,54)"/><text x="3.7901%" y="511.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (13 samples, 0.42%)</title><rect x="3.5401%" y="485" width="0.4222%" height="15" fill="rgb(245,192,40)"/><text x="3.7901%" y="495.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (13 samples, 0.42%)</title><rect x="3.5401%" y="469" width="0.4222%" height="15" fill="rgb(238,167,29)"/><text x="3.7901%" y="479.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (13 samples, 0.42%)</title><rect x="3.5401%" y="453" width="0.4222%" height="15" fill="rgb(232,182,51)"/><text x="3.7901%" y="463.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (13 samples, 0.42%)</title><rect x="3.5401%" y="437" width="0.4222%" height="15" fill="rgb(231,60,39)"/><text x="3.7901%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (13 samples, 0.42%)</title><rect x="3.5401%" y="421" width="0.4222%" height="15" fill="rgb(208,69,12)"/><text x="3.7901%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (12 samples, 0.39%)</title><rect x="3.5726%" y="405" width="0.3897%" height="15" fill="rgb(235,93,37)"/><text x="3.8226%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.39%)</title><rect x="3.5726%" y="389" width="0.3897%" height="15" fill="rgb(213,116,39)"/><text x="3.8226%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (5 samples, 0.16%)</title><rect x="4.0598%" y="805" width="0.1624%" height="15" fill="rgb(222,207,29)"/><text x="4.3098%" y="815.50"></text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (13 samples, 0.42%)</title><rect x="4.2222%" y="805" width="0.4222%" height="15" fill="rgb(206,96,30)"/><text x="4.4722%" y="815.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::value_with_hint (13 samples, 0.42%)</title><rect x="4.6768%" y="805" width="0.4222%" height="15" fill="rgb(218,138,4)"/><text x="4.9268%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (4 samples, 0.13%)</title><rect x="5.0991%" y="741" width="0.1299%" height="15" fill="rgb(250,191,14)"/><text x="5.3491%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.13%)</title><rect x="5.0991%" y="725" width="0.1299%" height="15" fill="rgb(239,60,40)"/><text x="5.3491%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.13%)</title><rect x="5.0991%" y="709" width="0.1299%" height="15" fill="rgb(206,27,48)"/><text x="5.3491%" y="719.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair (11 samples, 0.36%)</title><rect x="5.0991%" y="789" width="0.3573%" height="15" fill="rgb(225,35,8)"/><text x="5.3491%" y="799.50"></text></g><g><title>ropey::rope::Rope::insert_internal (11 samples, 0.36%)</title><rect x="5.0991%" y="773" width="0.3573%" height="15" fill="rgb(250,213,24)"/><text x="5.3491%" y="783.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (11 samples, 0.36%)</title><rect x="5.0991%" y="757" width="0.3573%" height="15" fill="rgb(247,123,22)"/><text x="5.3491%" y="767.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (7 samples, 0.23%)</title><rect x="5.2290%" y="741" width="0.2273%" height="15" fill="rgb(231,138,38)"/><text x="5.4790%" y="751.50"></text></g><g><title>astar_pairwise_aligner::main (18 samples, 0.58%)</title><rect x="5.0991%" y="805" width="0.5846%" height="15" fill="rgb(231,145,46)"/><text x="5.3491%" y="815.50"></text></g><g><title>astar_pairwise_aligner::main::{{closure}} (7 samples, 0.23%)</title><rect x="5.4563%" y="789" width="0.2273%" height="15" fill="rgb(251,118,11)"/><text x="5.7063%" y="799.50"></text></g><g><title>astar_pairwise_aligner::runner::run (7 samples, 0.23%)</title><rect x="5.4563%" y="773" width="0.2273%" height="15" fill="rgb(217,147,25)"/><text x="5.7063%" y="783.50"></text></g><g><title>astar_pairwise_aligner::align::align_advanced (7 samples, 0.23%)</title><rect x="5.4563%" y="757" width="0.2273%" height="15" fill="rgb(247,81,37)"/><text x="5.7063%" y="767.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SH as astar_pairwise_aligner::heuristic::Heuristic&gt;::build (7 samples, 0.23%)</title><rect x="5.4563%" y="741" width="0.2273%" height="15" fill="rgb(209,12,38)"/><text x="5.7063%" y="751.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::new (7 samples, 0.23%)</title><rect x="5.4563%" y="725" width="0.2273%" height="15" fill="rgb(227,1,9)"/><text x="5.7063%" y="735.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches (7 samples, 0.23%)</title><rect x="5.4563%" y="709" width="0.2273%" height="15" fill="rgb(248,47,43)"/><text x="5.7063%" y="719.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches_qgram_hash_exact (7 samples, 0.23%)</title><rect x="5.4563%" y="693" width="0.2273%" height="15" fill="rgb(221,10,30)"/><text x="5.7063%" y="703.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::new (7 samples, 0.23%)</title><rect x="5.4563%" y="677" width="0.2273%" height="15" fill="rgb(210,229,1)"/><text x="5.7063%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (7 samples, 0.23%)</title><rect x="5.4563%" y="661" width="0.2273%" height="15" fill="rgb(222,148,37)"/><text x="5.7063%" y="671.50"></text></g><g><title>core::slice::sort::quicksort (7 samples, 0.23%)</title><rect x="5.4563%" y="645" width="0.2273%" height="15" fill="rgb(234,67,33)"/><text x="5.7063%" y="655.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="629" width="0.2273%" height="15" fill="rgb(247,98,35)"/><text x="5.7063%" y="639.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="613" width="0.2273%" height="15" fill="rgb(247,138,52)"/><text x="5.7063%" y="623.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="597" width="0.2273%" height="15" fill="rgb(213,79,30)"/><text x="5.7063%" y="607.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="581" width="0.2273%" height="15" fill="rgb(246,177,23)"/><text x="5.7063%" y="591.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="565" width="0.2273%" height="15" fill="rgb(230,62,27)"/><text x="5.7063%" y="575.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="549" width="0.2273%" height="15" fill="rgb(216,154,8)"/><text x="5.7063%" y="559.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="533" width="0.2273%" height="15" fill="rgb(244,35,45)"/><text x="5.7063%" y="543.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="5.4563%" y="517" width="0.2273%" height="15" fill="rgb(251,115,12)"/><text x="5.7063%" y="527.50"></text></g><g><title>core::slice::sort::recurse (6 samples, 0.19%)</title><rect x="5.4888%" y="501" width="0.1949%" height="15" fill="rgb(240,54,50)"/><text x="5.7388%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15 samples, 0.49%)</title><rect x="5.7486%" y="805" width="0.4872%" height="15" fill="rgb(233,84,52)"/><text x="5.9986%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (4 samples, 0.13%)</title><rect x="6.3657%" y="757" width="0.1299%" height="15" fill="rgb(207,117,47)"/><text x="6.6157%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.13%)</title><rect x="6.3657%" y="741" width="0.1299%" height="15" fill="rgb(249,43,39)"/><text x="6.6157%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.13%)</title><rect x="6.3657%" y="725" width="0.1299%" height="15" fill="rgb(209,38,44)"/><text x="6.6157%" y="735.50"></text></g><g><title>ropey::rope::Rope::insert_internal (11 samples, 0.36%)</title><rect x="6.3657%" y="805" width="0.3573%" height="15" fill="rgb(236,212,23)"/><text x="6.6157%" y="815.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (11 samples, 0.36%)</title><rect x="6.3657%" y="789" width="0.3573%" height="15" fill="rgb(242,79,21)"/><text x="6.6157%" y="799.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (11 samples, 0.36%)</title><rect x="6.3657%" y="773" width="0.3573%" height="15" fill="rgb(211,96,35)"/><text x="6.6157%" y="783.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (7 samples, 0.23%)</title><rect x="6.4956%" y="757" width="0.2273%" height="15" fill="rgb(253,215,40)"/><text x="6.7456%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (27 samples, 0.88%)</title><rect x="6.7554%" y="757" width="0.8769%" height="15" fill="rgb(211,81,21)"/><text x="7.0054%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (26 samples, 0.84%)</title><rect x="6.7879%" y="741" width="0.8444%" height="15" fill="rgb(208,190,38)"/><text x="7.0379%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.84%)</title><rect x="6.7879%" y="725" width="0.8444%" height="15" fill="rgb(235,213,38)"/><text x="7.0379%" y="735.50"></text></g><g><title>ropey::tree::node_text::NodeText::insert_str (11 samples, 0.36%)</title><rect x="7.8597%" y="741" width="0.3573%" height="15" fill="rgb(237,122,38)"/><text x="8.1097%" y="751.50"></text></g><g><title>ropey::tree::node_text::inner::NodeSmallString::insert_str (11 samples, 0.36%)</title><rect x="7.8597%" y="725" width="0.3573%" height="15" fill="rgb(244,218,35)"/><text x="8.1097%" y="735.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::insert_from_slice (9 samples, 0.29%)</title><rect x="7.9247%" y="709" width="0.2923%" height="15" fill="rgb(240,68,47)"/><text x="8.1747%" y="719.50"></text></g><g><title>core::intrinsics::copy (9 samples, 0.29%)</title><rect x="7.9247%" y="693" width="0.2923%" height="15" fill="rgb(210,16,53)"/><text x="8.1747%" y="703.50"></text></g><g><title>[libc.so.6] (9 samples, 0.29%)</title><rect x="7.9247%" y="677" width="0.2923%" height="15" fill="rgb(235,124,12)"/><text x="8.1747%" y="687.50"></text></g><g><title>str_indices::lines::count_breaks (5 samples, 0.16%)</title><rect x="8.2494%" y="725" width="0.1624%" height="15" fill="rgb(224,169,11)"/><text x="8.4994%" y="735.50"></text></g><g><title>str_indices::lines::count_breaks_impl (5 samples, 0.16%)</title><rect x="8.2494%" y="709" width="0.1624%" height="15" fill="rgb(250,166,2)"/><text x="8.4994%" y="719.50"></text></g><g><title>ropey::tree::text_info::TextInfo::from_str (7 samples, 0.23%)</title><rect x="8.2170%" y="741" width="0.2273%" height="15" fill="rgb(242,216,29)"/><text x="8.4670%" y="751.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as str_indices::byte_chunk::ByteChunk&gt;::cmp_eq_byte (9 samples, 0.29%)</title><rect x="8.7366%" y="709" width="0.2923%" height="15" fill="rgb(230,116,27)"/><text x="8.9866%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (9 samples, 0.29%)</title><rect x="8.7366%" y="693" width="0.2923%" height="15" fill="rgb(228,99,48)"/><text x="8.9866%" y="703.50"></text></g><g><title>ropey::rope::Rope::insert_internal::{{closure}} (48 samples, 1.56%)</title><rect x="7.6323%" y="757" width="1.5589%" height="15" fill="rgb(253,11,6)"/><text x="7.8823%" y="767.50"></text></g><g><title>str_indices::chars::to_byte_idx (23 samples, 0.75%)</title><rect x="8.4443%" y="741" width="0.7470%" height="15" fill="rgb(247,143,39)"/><text x="8.6943%" y="751.50"></text></g><g><title>str_indices::chars::to_byte_idx_impl (23 samples, 0.75%)</title><rect x="8.4443%" y="725" width="0.7470%" height="15" fill="rgb(236,97,10)"/><text x="8.6943%" y="735.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (4 samples, 0.13%)</title><rect x="9.4511%" y="741" width="0.1299%" height="15" fill="rgb(233,208,19)"/><text x="9.7011%" y="751.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (91 samples, 2.96%)</title><rect x="6.7230%" y="805" width="2.9555%" height="15" fill="rgb(216,164,2)"/><text x="6.9730%" y="815.50">rop..</text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (90 samples, 2.92%)</title><rect x="6.7554%" y="789" width="2.9230%" height="15" fill="rgb(220,129,5)"/><text x="7.0054%" y="799.50">ro..</text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (90 samples, 2.92%)</title><rect x="6.7554%" y="773" width="2.9230%" height="15" fill="rgb(242,17,10)"/><text x="7.0054%" y="783.50">ro..</text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (15 samples, 0.49%)</title><rect x="9.1913%" y="757" width="0.4872%" height="15" fill="rgb(242,107,0)"/><text x="9.4413%" y="767.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair (24 samples, 0.78%)</title><rect x="9.7759%" y="597" width="0.7795%" height="15" fill="rgb(251,28,31)"/><text x="10.0259%" y="607.50"></text></g><g><title>ropey::rope::Rope::remove (24 samples, 0.78%)</title><rect x="9.7759%" y="581" width="0.7795%" height="15" fill="rgb(233,223,10)"/><text x="10.0259%" y="591.50"></text></g><g><title>ropey::rope::Rope::try_remove (24 samples, 0.78%)</title><rect x="9.7759%" y="565" width="0.7795%" height="15" fill="rgb(215,21,27)"/><text x="10.0259%" y="575.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (24 samples, 0.78%)</title><rect x="9.7759%" y="549" width="0.7795%" height="15" fill="rgb(232,23,21)"/><text x="10.0259%" y="559.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (24 samples, 0.78%)</title><rect x="9.7759%" y="533" width="0.7795%" height="15" fill="rgb(244,5,23)"/><text x="10.0259%" y="543.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (24 samples, 0.78%)</title><rect x="9.7759%" y="517" width="0.7795%" height="15" fill="rgb(226,81,46)"/><text x="10.0259%" y="527.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (24 samples, 0.78%)</title><rect x="9.7759%" y="501" width="0.7795%" height="15" fill="rgb(247,70,30)"/><text x="10.0259%" y="511.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (24 samples, 0.78%)</title><rect x="9.7759%" y="485" width="0.7795%" height="15" fill="rgb(212,68,19)"/><text x="10.0259%" y="495.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (24 samples, 0.78%)</title><rect x="9.7759%" y="469" width="0.7795%" height="15" fill="rgb(240,187,13)"/><text x="10.0259%" y="479.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (24 samples, 0.78%)</title><rect x="9.7759%" y="453" width="0.7795%" height="15" fill="rgb(223,113,26)"/><text x="10.0259%" y="463.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (24 samples, 0.78%)</title><rect x="9.7759%" y="437" width="0.7795%" height="15" fill="rgb(206,192,2)"/><text x="10.0259%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (24 samples, 0.78%)</title><rect x="9.7759%" y="421" width="0.7795%" height="15" fill="rgb(241,108,4)"/><text x="10.0259%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (20 samples, 0.65%)</title><rect x="9.9058%" y="405" width="0.6496%" height="15" fill="rgb(247,173,49)"/><text x="10.1558%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.65%)</title><rect x="9.9058%" y="389" width="0.6496%" height="15" fill="rgb(224,114,35)"/><text x="10.1558%" y="399.50"></text></g><g><title>[unknown] (246 samples, 7.99%)</title><rect x="2.6632%" y="821" width="7.9896%" height="15" fill="rgb(245,159,27)"/><text x="2.9132%" y="831.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (27 samples, 0.88%)</title><rect x="9.7759%" y="805" width="0.8769%" height="15" fill="rgb(245,172,44)"/><text x="10.0259%" y="815.50"></text></g><g><title>std::panic::catch_unwind (27 samples, 0.88%)</title><rect x="9.7759%" y="789" width="0.8769%" height="15" fill="rgb(236,23,11)"/><text x="10.0259%" y="799.50"></text></g><g><title>std::panicking::try (27 samples, 0.88%)</title><rect x="9.7759%" y="773" width="0.8769%" height="15" fill="rgb(205,117,38)"/><text x="10.0259%" y="783.50"></text></g><g><title>std::panicking::try::do_call (27 samples, 0.88%)</title><rect x="9.7759%" y="757" width="0.8769%" height="15" fill="rgb(237,72,25)"/><text x="10.0259%" y="767.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (27 samples, 0.88%)</title><rect x="9.7759%" y="741" width="0.8769%" height="15" fill="rgb(244,70,9)"/><text x="10.0259%" y="751.50"></text></g><g><title>std::panic::catch_unwind (27 samples, 0.88%)</title><rect x="9.7759%" y="725" width="0.8769%" height="15" fill="rgb(217,125,39)"/><text x="10.0259%" y="735.50"></text></g><g><title>std::panicking::try (27 samples, 0.88%)</title><rect x="9.7759%" y="709" width="0.8769%" height="15" fill="rgb(235,36,10)"/><text x="10.0259%" y="719.50"></text></g><g><title>std::panicking::try::do_call (27 samples, 0.88%)</title><rect x="9.7759%" y="693" width="0.8769%" height="15" fill="rgb(251,123,47)"/><text x="10.0259%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (27 samples, 0.88%)</title><rect x="9.7759%" y="677" width="0.8769%" height="15" fill="rgb(221,13,13)"/><text x="10.0259%" y="687.50"></text></g><g><title>std::rt::lang_start::{{closure}} (27 samples, 0.88%)</title><rect x="9.7759%" y="661" width="0.8769%" height="15" fill="rgb(238,131,9)"/><text x="10.0259%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 0.88%)</title><rect x="9.7759%" y="645" width="0.8769%" height="15" fill="rgb(211,50,8)"/><text x="10.0259%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (27 samples, 0.88%)</title><rect x="9.7759%" y="629" width="0.8769%" height="15" fill="rgb(245,182,24)"/><text x="10.0259%" y="639.50"></text></g><g><title>astar_pairwise_aligner::main (27 samples, 0.88%)</title><rect x="9.7759%" y="613" width="0.8769%" height="15" fill="rgb(242,14,37)"/><text x="10.0259%" y="623.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (8 samples, 0.26%)</title><rect x="10.7178%" y="453" width="0.2598%" height="15" fill="rgb(246,228,12)"/><text x="10.9678%" y="463.50"></text></g><g><title>rand::rng::Rng::gen (5 samples, 0.16%)</title><rect x="10.8152%" y="437" width="0.1624%" height="15" fill="rgb(213,55,15)"/><text x="11.0652%" y="447.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (5 samples, 0.16%)</title><rect x="10.8152%" y="421" width="0.1624%" height="15" fill="rgb(209,9,3)"/><text x="11.0652%" y="431.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha8Rng as rand_core::RngCore&gt;::next_u64 (5 samples, 0.16%)</title><rect x="10.8152%" y="405" width="0.1624%" height="15" fill="rgb(230,59,30)"/><text x="11.0652%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (5 samples, 0.16%)</title><rect x="10.8152%" y="389" width="0.1624%" height="15" fill="rgb(209,121,21)"/><text x="11.0652%" y="399.50"></text></g><g><title>astar_pairwise_aligner::generate::rand_char (9 samples, 0.29%)</title><rect x="10.7178%" y="517" width="0.2923%" height="15" fill="rgb(220,109,13)"/><text x="10.9678%" y="527.50"></text></g><g><title>rand::rng::Rng::gen_range (9 samples, 0.29%)</title><rect x="10.7178%" y="501" width="0.2923%" height="15" fill="rgb(232,18,1)"/><text x="10.9678%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (9 samples, 0.29%)</title><rect x="10.7178%" y="485" width="0.2923%" height="15" fill="rgb(215,41,42)"/><text x="10.9678%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (9 samples, 0.29%)</title><rect x="10.7178%" y="469" width="0.2923%" height="15" fill="rgb(224,123,36)"/><text x="10.9678%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.13%)</title><rect x="11.0425%" y="453" width="0.1299%" height="15" fill="rgb(240,125,3)"/><text x="11.2925%" y="463.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (9 samples, 0.29%)</title><rect x="11.0101%" y="469" width="0.2923%" height="15" fill="rgb(205,98,50)"/><text x="11.2601%" y="479.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.13%)</title><rect x="11.1725%" y="453" width="0.1299%" height="15" fill="rgb(205,185,37)"/><text x="11.4225%" y="463.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.13%)</title><rect x="11.1725%" y="437" width="0.1299%" height="15" fill="rgb(238,207,15)"/><text x="11.4225%" y="447.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha8Rng as rand_core::RngCore&gt;::next_u64 (4 samples, 0.13%)</title><rect x="11.1725%" y="421" width="0.1299%" height="15" fill="rgb(213,199,42)"/><text x="11.4225%" y="431.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.13%)</title><rect x="11.1725%" y="405" width="0.1299%" height="15" fill="rgb(235,201,11)"/><text x="11.4225%" y="415.50"></text></g><g><title>astar_pairwise_aligner::generate::random_mutation (19 samples, 0.62%)</title><rect x="10.7178%" y="533" width="0.6171%" height="15" fill="rgb(207,46,11)"/><text x="10.9678%" y="543.50"></text></g><g><title>rand::rng::Rng::gen_range (10 samples, 0.32%)</title><rect x="11.0101%" y="517" width="0.3248%" height="15" fill="rgb(241,35,35)"/><text x="11.2601%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (10 samples, 0.32%)</title><rect x="11.0101%" y="501" width="0.3248%" height="15" fill="rgb(243,32,47)"/><text x="11.2601%" y="511.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (10 samples, 0.32%)</title><rect x="11.0101%" y="485" width="0.3248%" height="15" fill="rgb(247,202,23)"/><text x="11.2601%" y="495.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (12 samples, 0.39%)</title><rect x="11.9844%" y="277" width="0.3897%" height="15" fill="rgb(219,102,11)"/><text x="12.2344%" y="287.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (12 samples, 0.39%)</title><rect x="11.9844%" y="261" width="0.3897%" height="15" fill="rgb(243,110,44)"/><text x="12.2344%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::leading_zeros (4 samples, 0.13%)</title><rect x="12.3741%" y="277" width="0.1299%" height="15" fill="rgb(222,74,54)"/><text x="12.6241%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (43 samples, 1.40%)</title><rect x="12.5041%" y="277" width="1.3966%" height="15" fill="rgb(216,99,12)"/><text x="12.7541%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::{{closure}} (4 samples, 0.13%)</title><rect x="15.6220%" y="213" width="0.1299%" height="15" fill="rgb(226,22,26)"/><text x="15.8720%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (15 samples, 0.49%)</title><rect x="16.0117%" y="85" width="0.4872%" height="15" fill="rgb(217,163,10)"/><text x="16.2617%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (15 samples, 0.49%)</title><rect x="16.0117%" y="69" width="0.4872%" height="15" fill="rgb(213,25,53)"/><text x="16.2617%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (15 samples, 0.49%)</title><rect x="16.0117%" y="53" width="0.4872%" height="15" fill="rgb(252,105,26)"/><text x="16.2617%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (15 samples, 0.49%)</title><rect x="16.0117%" y="37" width="0.4872%" height="15" fill="rgb(220,39,43)"/><text x="16.2617%" y="47.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.16%)</title><rect x="16.4989%" y="85" width="0.1624%" height="15" fill="rgb(229,68,48)"/><text x="16.7489%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.16%)</title><rect x="16.4989%" y="69" width="0.1624%" height="15" fill="rgb(252,8,32)"/><text x="16.7489%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (5 samples, 0.16%)</title><rect x="16.4989%" y="53" width="0.1624%" height="15" fill="rgb(223,20,43)"/><text x="16.7489%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (7 samples, 0.23%)</title><rect x="16.7587%" y="85" width="0.2273%" height="15" fill="rgb(229,81,49)"/><text x="17.0087%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (7 samples, 0.23%)</title><rect x="16.7587%" y="69" width="0.2273%" height="15" fill="rgb(236,28,36)"/><text x="17.0087%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (7 samples, 0.23%)</title><rect x="16.7587%" y="53" width="0.2273%" height="15" fill="rgb(249,185,26)"/><text x="17.0087%" y="63.50"></text></g><g><title>rand_chacha::guts::round (36 samples, 1.17%)</title><rect x="16.0117%" y="101" width="1.1692%" height="15" fill="rgb(249,174,33)"/><text x="16.2617%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (4 samples, 0.13%)</title><rect x="17.0510%" y="85" width="0.1299%" height="15" fill="rgb(233,201,37)"/><text x="17.3010%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (4 samples, 0.13%)</title><rect x="17.0510%" y="69" width="0.1299%" height="15" fill="rgb(221,78,26)"/><text x="17.3010%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (4 samples, 0.13%)</title><rect x="17.0510%" y="53" width="0.1299%" height="15" fill="rgb(250,127,30)"/><text x="17.3010%" y="63.50"></text></g><g><title>rand::rng::Rng::gen (101 samples, 3.28%)</title><rect x="13.9331%" y="277" width="3.2803%" height="15" fill="rgb(230,49,44)"/><text x="14.1831%" y="287.50">ran..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (101 samples, 3.28%)</title><rect x="13.9331%" y="261" width="3.2803%" height="15" fill="rgb(229,67,23)"/><text x="14.1831%" y="271.50">ran..</text></g><g><title>&lt;rand_chacha::chacha::ChaCha8Rng as rand_core::RngCore&gt;::next_u64 (101 samples, 3.28%)</title><rect x="13.9331%" y="245" width="3.2803%" height="15" fill="rgb(249,83,47)"/><text x="14.1831%" y="255.50">&lt;ra..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (101 samples, 3.28%)</title><rect x="13.9331%" y="229" width="3.2803%" height="15" fill="rgb(215,43,3)"/><text x="14.1831%" y="239.50">&lt;ra..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (45 samples, 1.46%)</title><rect x="15.7519%" y="213" width="1.4615%" height="15" fill="rgb(238,154,13)"/><text x="16.0019%" y="223.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha8Core as rand_core::block::BlockRngCore&gt;::generate (45 samples, 1.46%)</title><rect x="15.7519%" y="197" width="1.4615%" height="15" fill="rgb(219,56,2)"/><text x="16.0019%" y="207.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (45 samples, 1.46%)</title><rect x="15.7519%" y="181" width="1.4615%" height="15" fill="rgb(233,0,4)"/><text x="16.0019%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide (45 samples, 1.46%)</title><rect x="15.7519%" y="165" width="1.4615%" height="15" fill="rgb(235,30,7)"/><text x="16.0019%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (45 samples, 1.46%)</title><rect x="15.7519%" y="149" width="1.4615%" height="15" fill="rgb(250,79,13)"/><text x="16.0019%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (45 samples, 1.46%)</title><rect x="15.7519%" y="133" width="1.4615%" height="15" fill="rgb(211,146,34)"/><text x="16.0019%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (44 samples, 1.43%)</title><rect x="15.7843%" y="117" width="1.4290%" height="15" fill="rgb(228,22,38)"/><text x="16.0343%" y="127.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair::{{closure}} (179 samples, 5.81%)</title><rect x="11.4323%" y="373" width="5.8136%" height="15" fill="rgb(235,168,5)"/><text x="11.6823%" y="383.50">astar_p..</text></g><g><title>astar_pairwise_aligner::generate::rand_char (179 samples, 5.81%)</title><rect x="11.4323%" y="357" width="5.8136%" height="15" fill="rgb(221,155,16)"/><text x="11.6823%" y="367.50">astar_p..</text></g><g><title>rand::rng::Rng::gen_range (165 samples, 5.36%)</title><rect x="11.8870%" y="341" width="5.3589%" height="15" fill="rgb(215,215,53)"/><text x="12.1370%" y="351.50">rand::r..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (164 samples, 5.33%)</title><rect x="11.9195%" y="325" width="5.3264%" height="15" fill="rgb(223,4,10)"/><text x="12.1695%" y="335.50">&lt;core::..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (164 samples, 5.33%)</title><rect x="11.9195%" y="309" width="5.3264%" height="15" fill="rgb(234,103,6)"/><text x="12.1695%" y="319.50">&lt;rand::..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (164 samples, 5.33%)</title><rect x="11.9195%" y="293" width="5.3264%" height="15" fill="rgb(227,97,0)"/><text x="12.1695%" y="303.50">&lt;rand::..</text></g><g><title>itertools::Itertools::collect_vec (188 samples, 6.11%)</title><rect x="11.4323%" y="533" width="6.1059%" height="15" fill="rgb(234,150,53)"/><text x="11.6823%" y="543.50">itertool..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (188 samples, 6.11%)</title><rect x="11.4323%" y="517" width="6.1059%" height="15" fill="rgb(228,201,54)"/><text x="11.6823%" y="527.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (188 samples, 6.11%)</title><rect x="11.4323%" y="501" width="6.1059%" height="15" fill="rgb(222,22,37)"/><text x="11.6823%" y="511.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (188 samples, 6.11%)</title><rect x="11.4323%" y="485" width="6.1059%" height="15" fill="rgb(237,53,32)"/><text x="11.6823%" y="495.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (188 samples, 6.11%)</title><rect x="11.4323%" y="469" width="6.1059%" height="15" fill="rgb(233,25,53)"/><text x="11.6823%" y="479.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (188 samples, 6.11%)</title><rect x="11.4323%" y="453" width="6.1059%" height="15" fill="rgb(210,40,34)"/><text x="11.6823%" y="463.50">&lt;alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (188 samples, 6.11%)</title><rect x="11.4323%" y="437" width="6.1059%" height="15" fill="rgb(241,220,44)"/><text x="11.6823%" y="447.50">core::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (188 samples, 6.11%)</title><rect x="11.4323%" y="421" width="6.1059%" height="15" fill="rgb(235,28,35)"/><text x="11.6823%" y="431.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (188 samples, 6.11%)</title><rect x="11.4323%" y="405" width="6.1059%" height="15" fill="rgb(210,56,17)"/><text x="11.6823%" y="415.50">core::it..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (188 samples, 6.11%)</title><rect x="11.4323%" y="389" width="6.1059%" height="15" fill="rgb(224,130,29)"/><text x="11.6823%" y="399.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9 samples, 0.29%)</title><rect x="17.2459%" y="373" width="0.2923%" height="15" fill="rgb(235,212,8)"/><text x="17.4959%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (9 samples, 0.29%)</title><rect x="17.2459%" y="357" width="0.2923%" height="15" fill="rgb(223,33,50)"/><text x="17.4959%" y="367.50"></text></g><g><title>core::ptr::write (9 samples, 0.29%)</title><rect x="17.2459%" y="341" width="0.2923%" height="15" fill="rgb(219,149,13)"/><text x="17.4959%" y="351.50"></text></g><g><title>ropey::tree::node::Node::text_info (4 samples, 0.13%)</title><rect x="17.5706%" y="469" width="0.1299%" height="15" fill="rgb(250,156,29)"/><text x="17.8206%" y="479.50"></text></g><g><title>ropey::tree::text_info::TextInfo::from_str (4 samples, 0.13%)</title><rect x="17.5706%" y="453" width="0.1299%" height="15" fill="rgb(216,193,19)"/><text x="17.8206%" y="463.50"></text></g><g><title>ropey::rope_builder::RopeBuilder::append_leaf_node (5 samples, 0.16%)</title><rect x="17.5706%" y="485" width="0.1624%" height="15" fill="rgb(216,135,14)"/><text x="17.8206%" y="495.50"></text></g><g><title>ropey::rope::Rope::from_str (7 samples, 0.23%)</title><rect x="17.5382%" y="533" width="0.2273%" height="15" fill="rgb(241,47,5)"/><text x="17.7882%" y="543.50"></text></g><g><title>ropey::rope_builder::RopeBuilder::build_at_once (7 samples, 0.23%)</title><rect x="17.5382%" y="517" width="0.2273%" height="15" fill="rgb(233,42,35)"/><text x="17.7882%" y="527.50"></text></g><g><title>ropey::rope_builder::RopeBuilder::append_internal (7 samples, 0.23%)</title><rect x="17.5382%" y="501" width="0.2273%" height="15" fill="rgb(231,13,6)"/><text x="17.7882%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (6 samples, 0.19%)</title><rect x="17.8954%" y="517" width="0.1949%" height="15" fill="rgb(207,181,40)"/><text x="18.1454%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.16%)</title><rect x="17.9279%" y="501" width="0.1624%" height="15" fill="rgb(254,173,49)"/><text x="18.1779%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.16%)</title><rect x="17.9279%" y="485" width="0.1624%" height="15" fill="rgb(221,1,38)"/><text x="18.1779%" y="495.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (9 samples, 0.29%)</title><rect x="18.0903%" y="517" width="0.2923%" height="15" fill="rgb(206,124,46)"/><text x="18.3403%" y="527.50"></text></g><g><title>ropey::rope::Rope::insert_internal (20 samples, 0.65%)</title><rect x="17.8305%" y="533" width="0.6496%" height="15" fill="rgb(249,21,11)"/><text x="18.0805%" y="543.50"></text></g><g><title>ropey::rope::Rope::len_bytes (5 samples, 0.16%)</title><rect x="18.4800%" y="533" width="0.1624%" height="15" fill="rgb(222,201,40)"/><text x="18.7300%" y="543.50"></text></g><g><title>ropey::tree::node::Node::byte_count (5 samples, 0.16%)</title><rect x="18.4800%" y="517" width="0.1624%" height="15" fill="rgb(235,61,29)"/><text x="18.7300%" y="527.50"></text></g><g><title>ropey::tree::node::Node::text_info (5 samples, 0.16%)</title><rect x="18.4800%" y="501" width="0.1624%" height="15" fill="rgb(219,207,3)"/><text x="18.7300%" y="511.50"></text></g><g><title>ropey::tree::node_children::NodeChildren::combined_info (5 samples, 0.16%)</title><rect x="18.4800%" y="485" width="0.1624%" height="15" fill="rgb(222,56,46)"/><text x="18.7300%" y="495.50"></text></g><g><title>ropey::rope::Rope::len_chars (4 samples, 0.13%)</title><rect x="18.7723%" y="501" width="0.1299%" height="15" fill="rgb(239,76,54)"/><text x="19.0223%" y="511.50"></text></g><g><title>ropey::tree::node::Node::char_count (4 samples, 0.13%)</title><rect x="18.7723%" y="485" width="0.1299%" height="15" fill="rgb(231,124,27)"/><text x="19.0223%" y="495.50"></text></g><g><title>ropey::tree::node::Node::text_info (4 samples, 0.13%)</title><rect x="18.7723%" y="469" width="0.1299%" height="15" fill="rgb(249,195,6)"/><text x="19.0223%" y="479.50"></text></g><g><title>ropey::tree::node_children::NodeChildren::combined_info (4 samples, 0.13%)</title><rect x="18.7723%" y="453" width="0.1299%" height="15" fill="rgb(237,174,47)"/><text x="19.0223%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::make_mut (4 samples, 0.13%)</title><rect x="19.1296%" y="469" width="0.1299%" height="15" fill="rgb(206,201,31)"/><text x="19.3796%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.13%)</title><rect x="19.1296%" y="453" width="0.1299%" height="15" fill="rgb(231,57,52)"/><text x="19.3796%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.13%)</title><rect x="19.1296%" y="437" width="0.1299%" height="15" fill="rgb(248,177,22)"/><text x="19.3796%" y="447.50"></text></g><g><title>core::intrinsics::copy (4 samples, 0.13%)</title><rect x="20.5261%" y="309" width="0.1299%" height="15" fill="rgb(215,211,37)"/><text x="20.7761%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.13%)</title><rect x="20.5261%" y="293" width="0.1299%" height="15" fill="rgb(241,128,51)"/><text x="20.7761%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (5 samples, 0.16%)</title><rect x="20.5261%" y="325" width="0.1624%" height="15" fill="rgb(227,165,31)"/><text x="20.7761%" y="335.50"></text></g><g><title>ropey::tree::node_text::NodeText::remove_range (6 samples, 0.19%)</title><rect x="20.5261%" y="357" width="0.1949%" height="15" fill="rgb(228,167,24)"/><text x="20.7761%" y="367.50"></text></g><g><title>ropey::tree::node_text::inner::NodeSmallString::remove_range (6 samples, 0.19%)</title><rect x="20.5261%" y="341" width="0.1949%" height="15" fill="rgb(228,143,12)"/><text x="20.7761%" y="351.50"></text></g><g><title>ropey::tree::text_info::TextInfo::from_str (5 samples, 0.16%)</title><rect x="20.7210%" y="357" width="0.1624%" height="15" fill="rgb(249,149,8)"/><text x="20.9710%" y="367.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as str_indices::byte_chunk::ByteChunk&gt;::cmp_eq_byte (15 samples, 0.49%)</title><rect x="21.6304%" y="325" width="0.4872%" height="15" fill="rgb(243,35,44)"/><text x="21.8804%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (15 samples, 0.49%)</title><rect x="21.6304%" y="309" width="0.4872%" height="15" fill="rgb(246,89,9)"/><text x="21.8804%" y="319.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as str_indices::byte_chunk::ByteChunk&gt;::sum_bytes (4 samples, 0.13%)</title><rect x="22.1176%" y="325" width="0.1299%" height="15" fill="rgb(233,213,13)"/><text x="22.3676%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_sad_epu8 (4 samples, 0.13%)</title><rect x="22.1176%" y="309" width="0.1299%" height="15" fill="rgb(233,141,41)"/><text x="22.3676%" y="319.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (68 samples, 2.21%)</title><rect x="20.1689%" y="389" width="2.2085%" height="15" fill="rgb(239,167,4)"/><text x="20.4189%" y="399.50">r..</text></g><g><title>ropey::tree::node::Node::remove_char_range (64 samples, 2.08%)</title><rect x="20.2988%" y="373" width="2.0786%" height="15" fill="rgb(209,217,16)"/><text x="20.5488%" y="383.50">r..</text></g><g><title>str_indices::chars::to_byte_idx (46 samples, 1.49%)</title><rect x="20.8834%" y="357" width="1.4940%" height="15" fill="rgb(219,88,35)"/><text x="21.1334%" y="367.50"></text></g><g><title>str_indices::chars::to_byte_idx_impl (46 samples, 1.49%)</title><rect x="20.8834%" y="341" width="1.4940%" height="15" fill="rgb(220,193,23)"/><text x="21.1334%" y="351.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (84 samples, 2.73%)</title><rect x="19.8116%" y="421" width="2.7282%" height="15" fill="rgb(230,90,52)"/><text x="20.0616%" y="431.50">ro..</text></g><g><title>ropey::tree::node::Node::remove_char_range (81 samples, 2.63%)</title><rect x="19.9091%" y="405" width="2.6307%" height="15" fill="rgb(252,106,19)"/><text x="20.1591%" y="415.50">ro..</text></g><g><title>ropey::tree::node_children::NodeChildren::search_char_idx_range (5 samples, 0.16%)</title><rect x="22.3774%" y="389" width="0.1624%" height="15" fill="rgb(206,74,20)"/><text x="22.6274%" y="399.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (99 samples, 3.22%)</title><rect x="19.4219%" y="453" width="3.2153%" height="15" fill="rgb(230,138,44)"/><text x="19.6719%" y="463.50">rop..</text></g><g><title>ropey::tree::node::Node::remove_char_range (95 samples, 3.09%)</title><rect x="19.5518%" y="437" width="3.0854%" height="15" fill="rgb(235,182,43)"/><text x="19.8018%" y="447.50">rop..</text></g><g><title>ropey::tree::node::Node::remove_char_range (108 samples, 3.51%)</title><rect x="19.2920%" y="469" width="3.5076%" height="15" fill="rgb(242,16,51)"/><text x="19.5420%" y="479.50">rop..</text></g><g><title>ropey::tree::node_children::NodeChildren::search_char_idx_range (4 samples, 0.13%)</title><rect x="22.6697%" y="453" width="0.1299%" height="15" fill="rgb(248,9,4)"/><text x="22.9197%" y="463.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (117 samples, 3.80%)</title><rect x="19.0322%" y="485" width="3.7999%" height="15" fill="rgb(210,31,22)"/><text x="19.2822%" y="495.50">rope..</text></g><g><title>ropey::tree::node::Node::remove_char_range (122 samples, 3.96%)</title><rect x="18.9347%" y="501" width="3.9623%" height="15" fill="rgb(239,54,39)"/><text x="19.1847%" y="511.50">rope..</text></g><g><title>astar_pairwise_aligner::generate::generate_pair (379 samples, 12.31%)</title><rect x="10.6528%" y="549" width="12.3092%" height="15" fill="rgb(230,99,41)"/><text x="10.9028%" y="559.50">astar_pairwise_ali..</text></g><g><title>ropey::rope::Rope::remove (133 samples, 4.32%)</title><rect x="18.6424%" y="533" width="4.3196%" height="15" fill="rgb(253,106,12)"/><text x="18.8924%" y="543.50">ropey..</text></g><g><title>ropey::rope::Rope::try_remove (133 samples, 4.32%)</title><rect x="18.6424%" y="517" width="4.3196%" height="15" fill="rgb(213,46,41)"/><text x="18.8924%" y="527.50">ropey..</text></g><g><title>astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt;::push (4 samples, 0.13%)</title><rect x="24.9107%" y="469" width="0.1299%" height="15" fill="rgb(215,133,35)"/><text x="25.1607%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.39%)</title><rect x="25.5927%" y="437" width="0.3897%" height="15" fill="rgb(213,28,5)"/><text x="25.8427%" y="447.50"></text></g><g><title>&lt;bio::alphabets::QGrams&lt;C,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.39%)</title><rect x="25.5927%" y="421" width="0.3897%" height="15" fill="rgb(215,77,49)"/><text x="25.8427%" y="431.50"></text></g><g><title>bio::alphabets::RankTransform::get (8 samples, 0.26%)</title><rect x="25.7226%" y="405" width="0.2598%" height="15" fill="rgb(248,100,22)"/><text x="25.9726%" y="415.50"></text></g><g><title>vec_map::VecMap&lt;V&gt;::get (6 samples, 0.19%)</title><rect x="25.7876%" y="389" width="0.1949%" height="15" fill="rgb(208,67,9)"/><text x="26.0376%" y="399.50"></text></g><g><title>bio::alphabets::QGrams&lt;C,T&gt;::qgram_push (4 samples, 0.13%)</title><rect x="26.0799%" y="357" width="0.1299%" height="15" fill="rgb(219,133,21)"/><text x="26.3299%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.32%)</title><rect x="25.9825%" y="437" width="0.3248%" height="15" fill="rgb(246,46,29)"/><text x="26.2325%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (10 samples, 0.32%)</title><rect x="25.9825%" y="421" width="0.3248%" height="15" fill="rgb(246,185,52)"/><text x="26.2325%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (10 samples, 0.32%)</title><rect x="25.9825%" y="405" width="0.3248%" height="15" fill="rgb(252,136,11)"/><text x="26.2325%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (10 samples, 0.32%)</title><rect x="25.9825%" y="389" width="0.3248%" height="15" fill="rgb(219,138,53)"/><text x="26.2325%" y="399.50"></text></g><g><title>&lt;bio::alphabets::QGrams&lt;C,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.32%)</title><rect x="25.9825%" y="373" width="0.3248%" height="15" fill="rgb(211,51,23)"/><text x="26.2325%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.23%)</title><rect x="26.7295%" y="405" width="0.2273%" height="15" fill="rgb(247,221,28)"/><text x="26.9795%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.42%)</title><rect x="26.7295%" y="421" width="0.4222%" height="15" fill="rgb(251,222,45)"/><text x="26.9795%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.19%)</title><rect x="26.9568%" y="405" width="0.1949%" height="15" fill="rgb(217,162,53)"/><text x="27.2068%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.19%)</title><rect x="26.9568%" y="389" width="0.1949%" height="15" fill="rgb(229,93,14)"/><text x="27.2068%" y="399.50"></text></g><g><title>alloc::vec::from_elem (6 samples, 0.19%)</title><rect x="27.1842%" y="421" width="0.1949%" height="15" fill="rgb(209,67,49)"/><text x="27.4342%" y="431.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (6 samples, 0.19%)</title><rect x="27.1842%" y="405" width="0.1949%" height="15" fill="rgb(213,87,29)"/><text x="27.4342%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.19%)</title><rect x="27.1842%" y="389" width="0.1949%" height="15" fill="rgb(205,151,52)"/><text x="27.4342%" y="399.50"></text></g><g><title>core::ptr::write (6 samples, 0.19%)</title><rect x="27.1842%" y="373" width="0.1949%" height="15" fill="rgb(253,215,39)"/><text x="27.4342%" y="383.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::new (48 samples, 1.56%)</title><rect x="26.3722%" y="437" width="1.5589%" height="15" fill="rgb(221,220,41)"/><text x="26.6222%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (12 samples, 0.39%)</title><rect x="27.5414%" y="421" width="0.3897%" height="15" fill="rgb(218,133,21)"/><text x="27.7914%" y="431.50"></text></g><g><title>core::slice::sort::quicksort (12 samples, 0.39%)</title><rect x="27.5414%" y="405" width="0.3897%" height="15" fill="rgb(221,193,43)"/><text x="27.7914%" y="415.50"></text></g><g><title>core::slice::sort::recurse (12 samples, 0.39%)</title><rect x="27.5414%" y="389" width="0.3897%" height="15" fill="rgb(240,128,52)"/><text x="27.7914%" y="399.50"></text></g><g><title>core::slice::sort::recurse (11 samples, 0.36%)</title><rect x="27.5739%" y="373" width="0.3573%" height="15" fill="rgb(253,114,12)"/><text x="27.8239%" y="383.50"></text></g><g><title>core::slice::sort::recurse (7 samples, 0.23%)</title><rect x="27.7038%" y="357" width="0.2273%" height="15" fill="rgb(215,223,47)"/><text x="27.9538%" y="367.50"></text></g><g><title>core::slice::sort::recurse (4 samples, 0.13%)</title><rect x="27.8012%" y="341" width="0.1299%" height="15" fill="rgb(248,225,23)"/><text x="28.0512%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.16%)</title><rect x="28.0611%" y="181" width="0.1624%" height="15" fill="rgb(250,108,0)"/><text x="28.3111%" y="191.50"></text></g><g><title>astar_pairwise_aligner::matches::qgrams::iterate_fixed_qgrams::{{closure}} (13 samples, 0.42%)</title><rect x="27.9311%" y="213" width="0.4222%" height="15" fill="rgb(228,208,7)"/><text x="28.1811%" y="223.50"></text></g><g><title>astar_pairwise_aligner::matches::qgrams::to_qgram (11 samples, 0.36%)</title><rect x="27.9961%" y="197" width="0.3573%" height="15" fill="rgb(244,45,10)"/><text x="28.2461%" y="207.50"></text></g><g><title>bio::alphabets::RankTransform::get (4 samples, 0.13%)</title><rect x="28.2234%" y="181" width="0.1299%" height="15" fill="rgb(207,125,25)"/><text x="28.4734%" y="191.50"></text></g><g><title>astar_pairwise_aligner::matches::qgrams::fixed_seeds (14 samples, 0.45%)</title><rect x="27.9311%" y="437" width="0.4547%" height="15" fill="rgb(210,195,18)"/><text x="28.1811%" y="447.50"></text></g><g><title>itertools::Itertools::collect_vec (14 samples, 0.45%)</title><rect x="27.9311%" y="421" width="0.4547%" height="15" fill="rgb(249,80,12)"/><text x="28.1811%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.45%)</title><rect x="27.9311%" y="405" width="0.4547%" height="15" fill="rgb(221,65,9)"/><text x="28.1811%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.45%)</title><rect x="27.9311%" y="389" width="0.4547%" height="15" fill="rgb(235,49,36)"/><text x="28.1811%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.45%)</title><rect x="27.9311%" y="373" width="0.4547%" height="15" fill="rgb(225,32,20)"/><text x="28.1811%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.45%)</title><rect x="27.9311%" y="357" width="0.4547%" height="15" fill="rgb(215,141,46)"/><text x="28.1811%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.45%)</title><rect x="27.9311%" y="341" width="0.4547%" height="15" fill="rgb(250,160,47)"/><text x="28.1811%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.45%)</title><rect x="27.9311%" y="325" width="0.4547%" height="15" fill="rgb(216,222,40)"/><text x="28.1811%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.45%)</title><rect x="27.9311%" y="309" width="0.4547%" height="15" fill="rgb(234,217,39)"/><text x="28.1811%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.45%)</title><rect x="27.9311%" y="293" width="0.4547%" height="15" fill="rgb(207,178,40)"/><text x="28.1811%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.45%)</title><rect x="27.9311%" y="277" width="0.4547%" height="15" fill="rgb(221,136,13)"/><text x="28.1811%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.45%)</title><rect x="27.9311%" y="261" width="0.4547%" height="15" fill="rgb(249,199,10)"/><text x="28.1811%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (14 samples, 0.45%)</title><rect x="27.9311%" y="245" width="0.4547%" height="15" fill="rgb(249,222,13)"/><text x="28.1811%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (14 samples, 0.45%)</title><rect x="27.9311%" y="229" width="0.4547%" height="15" fill="rgb(244,185,38)"/><text x="28.1811%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (5 samples, 0.16%)</title><rect x="28.4508%" y="437" width="0.1624%" height="15" fill="rgb(236,202,9)"/><text x="28.7008%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (25 samples, 0.81%)</title><rect x="28.7431%" y="373" width="0.8120%" height="15" fill="rgb(250,229,37)"/><text x="28.9931%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (25 samples, 0.81%)</title><rect x="28.7431%" y="357" width="0.8120%" height="15" fill="rgb(206,174,23)"/><text x="28.9931%" y="367.50"></text></g><g><title>core::ptr::write (25 samples, 0.81%)</title><rect x="28.7431%" y="341" width="0.8120%" height="15" fill="rgb(211,33,43)"/><text x="28.9931%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (31 samples, 1.01%)</title><rect x="28.6132%" y="437" width="1.0068%" height="15" fill="rgb(245,58,50)"/><text x="28.8632%" y="447.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (31 samples, 1.01%)</title><rect x="28.6132%" y="421" width="1.0068%" height="15" fill="rgb(244,68,36)"/><text x="28.8632%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (31 samples, 1.01%)</title><rect x="28.6132%" y="405" width="1.0068%" height="15" fill="rgb(232,229,15)"/><text x="28.8632%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (30 samples, 0.97%)</title><rect x="28.6457%" y="389" width="0.9743%" height="15" fill="rgb(254,30,23)"/><text x="28.8957%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.29%)</title><rect x="29.6525%" y="373" width="0.2923%" height="15" fill="rgb(235,160,14)"/><text x="29.9025%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.29%)</title><rect x="29.6525%" y="357" width="0.2923%" height="15" fill="rgb(212,155,44)"/><text x="29.9025%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.29%)</title><rect x="29.6525%" y="341" width="0.2923%" height="15" fill="rgb(226,2,50)"/><text x="29.9025%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11 samples, 0.36%)</title><rect x="29.6200%" y="437" width="0.3573%" height="15" fill="rgb(234,177,6)"/><text x="29.8700%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 0.36%)</title><rect x="29.6200%" y="421" width="0.3573%" height="15" fill="rgb(217,24,9)"/><text x="29.8700%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.36%)</title><rect x="29.6200%" y="405" width="0.3573%" height="15" fill="rgb(220,13,46)"/><text x="29.8700%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.36%)</title><rect x="29.6200%" y="389" width="0.3573%" height="15" fill="rgb(239,221,27)"/><text x="29.8700%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.13%)</title><rect x="29.9773%" y="389" width="0.1299%" height="15" fill="rgb(222,198,25)"/><text x="30.2273%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.13%)</title><rect x="29.9773%" y="373" width="0.1299%" height="15" fill="rgb(211,99,13)"/><text x="30.2273%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.13%)</title><rect x="29.9773%" y="357" width="0.1299%" height="15" fill="rgb(232,111,31)"/><text x="30.2273%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.13%)</title><rect x="29.9773%" y="341" width="0.1299%" height="15" fill="rgb(245,82,37)"/><text x="30.2273%" y="351.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u64 (4 samples, 0.13%)</title><rect x="29.9773%" y="325" width="0.1299%" height="15" fill="rgb(227,149,46)"/><text x="30.2273%" y="335.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (4 samples, 0.13%)</title><rect x="29.9773%" y="309" width="0.1299%" height="15" fill="rgb(218,36,50)"/><text x="30.2273%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (4 samples, 0.13%)</title><rect x="29.9773%" y="293" width="0.1299%" height="15" fill="rgb(226,80,48)"/><text x="30.2273%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="31.6336%" y="341" width="0.1299%" height="15" fill="rgb(238,224,15)"/><text x="31.8836%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.13%)</title><rect x="31.6336%" y="325" width="0.1299%" height="15" fill="rgb(241,136,10)"/><text x="31.8836%" y="335.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches_qgram_hash_exact (8 samples, 0.26%)</title><rect x="31.7636%" y="341" width="0.2598%" height="15" fill="rgb(208,32,45)"/><text x="32.0136%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (24 samples, 0.78%)</title><rect x="32.0883%" y="341" width="0.7795%" height="15" fill="rgb(207,135,9)"/><text x="32.3383%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (24 samples, 0.78%)</title><rect x="32.0883%" y="325" width="0.7795%" height="15" fill="rgb(206,86,44)"/><text x="32.3383%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (24 samples, 0.78%)</title><rect x="32.0883%" y="309" width="0.7795%" height="15" fill="rgb(245,177,15)"/><text x="32.3383%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (22 samples, 0.71%)</title><rect x="32.9652%" y="341" width="0.7145%" height="15" fill="rgb(206,64,50)"/><text x="33.2152%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.71%)</title><rect x="32.9652%" y="325" width="0.7145%" height="15" fill="rgb(234,36,40)"/><text x="33.2152%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.71%)</title><rect x="32.9652%" y="309" width="0.7145%" height="15" fill="rgb(213,64,8)"/><text x="33.2152%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.29%)</title><rect x="33.6798%" y="341" width="0.2923%" height="15" fill="rgb(210,75,36)"/><text x="33.9298%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.29%)</title><rect x="33.6798%" y="325" width="0.2923%" height="15" fill="rgb(229,88,21)"/><text x="33.9298%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (124 samples, 4.03%)</title><rect x="30.1072%" y="389" width="4.0273%" height="15" fill="rgb(252,204,47)"/><text x="30.3572%" y="399.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (124 samples, 4.03%)</title><rect x="30.1072%" y="373" width="4.0273%" height="15" fill="rgb(208,77,27)"/><text x="30.3572%" y="383.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (124 samples, 4.03%)</title><rect x="30.1072%" y="357" width="4.0273%" height="15" fill="rgb(221,76,26)"/><text x="30.3572%" y="367.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (5 samples, 0.16%)</title><rect x="33.9721%" y="341" width="0.1624%" height="15" fill="rgb(225,139,18)"/><text x="34.2221%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.16%)</title><rect x="33.9721%" y="325" width="0.1624%" height="15" fill="rgb(230,137,11)"/><text x="34.2221%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.16%)</title><rect x="33.9721%" y="309" width="0.1624%" height="15" fill="rgb(212,28,1)"/><text x="34.2221%" y="319.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches (283 samples, 9.19%)</title><rect x="25.0406%" y="469" width="9.1913%" height="15" fill="rgb(248,164,17)"/><text x="25.2906%" y="479.50">astar_pairwis..</text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches_qgram_hash_exact (283 samples, 9.19%)</title><rect x="25.0406%" y="453" width="9.1913%" height="15" fill="rgb(222,171,42)"/><text x="25.2906%" y="463.50">astar_pairwis..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (131 samples, 4.25%)</title><rect x="29.9773%" y="437" width="4.2546%" height="15" fill="rgb(243,84,45)"/><text x="30.2273%" y="447.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (131 samples, 4.25%)</title><rect x="29.9773%" y="421" width="4.2546%" height="15" fill="rgb(252,49,23)"/><text x="30.2273%" y="431.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (131 samples, 4.25%)</title><rect x="29.9773%" y="405" width="4.2546%" height="15" fill="rgb(215,19,7)"/><text x="30.2273%" y="415.50">hashb..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="34.8165%" y="245" width="0.1299%" height="15" fill="rgb(238,81,41)"/><text x="35.0665%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.13%)</title><rect x="34.8165%" y="229" width="0.1299%" height="15" fill="rgb(210,199,37)"/><text x="35.0665%" y="239.50"></text></g><g><title>&lt;itertools::groupbylazy::Group&lt;K,I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="34.8165%" y="213" width="0.1299%" height="15" fill="rgb(244,192,49)"/><text x="35.0665%" y="223.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::new::{{closure}} (24 samples, 0.78%)</title><rect x="34.3293%" y="341" width="0.7795%" height="15" fill="rgb(226,211,11)"/><text x="34.5793%" y="351.50"></text></g><g><title>itertools::Itertools::collect_vec (24 samples, 0.78%)</title><rect x="34.3293%" y="325" width="0.7795%" height="15" fill="rgb(236,162,54)"/><text x="34.5793%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 0.78%)</title><rect x="34.3293%" y="309" width="0.7795%" height="15" fill="rgb(220,229,9)"/><text x="34.5793%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (24 samples, 0.78%)</title><rect x="34.3293%" y="293" width="0.7795%" height="15" fill="rgb(250,87,22)"/><text x="34.5793%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.75%)</title><rect x="34.3618%" y="277" width="0.7470%" height="15" fill="rgb(239,43,17)"/><text x="34.6118%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.29%)</title><rect x="34.8165%" y="261" width="0.2923%" height="15" fill="rgb(231,177,25)"/><text x="35.0665%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.13%)</title><rect x="35.3037%" y="277" width="0.1299%" height="15" fill="rgb(219,179,1)"/><text x="35.5537%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.13%)</title><rect x="35.3037%" y="261" width="0.1299%" height="15" fill="rgb(238,219,53)"/><text x="35.5537%" y="271.50"></text></g><g><title>core::ptr::write (4 samples, 0.13%)</title><rect x="35.3037%" y="245" width="0.1299%" height="15" fill="rgb(232,167,36)"/><text x="35.5537%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.23%)</title><rect x="35.4336%" y="277" width="0.2273%" height="15" fill="rgb(244,19,51)"/><text x="35.6836%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.23%)</title><rect x="35.4336%" y="261" width="0.2273%" height="15" fill="rgb(224,6,22)"/><text x="35.6836%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (7 samples, 0.23%)</title><rect x="35.4336%" y="245" width="0.2273%" height="15" fill="rgb(224,145,5)"/><text x="35.6836%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (7 samples, 0.23%)</title><rect x="35.4336%" y="229" width="0.2273%" height="15" fill="rgb(234,130,49)"/><text x="35.6836%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (4 samples, 0.13%)</title><rect x="35.5310%" y="213" width="0.1299%" height="15" fill="rgb(254,6,2)"/><text x="35.7810%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SH as astar_pairwise_aligner::heuristic::Heuristic&gt;::build (392 samples, 12.73%)</title><rect x="22.9620%" y="501" width="12.7314%" height="15" fill="rgb(208,96,46)"/><text x="23.2120%" y="511.50">&lt;astar_pairwise_ali..</text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::new (390 samples, 12.67%)</title><rect x="23.0270%" y="485" width="12.6665%" height="15" fill="rgb(239,3,39)"/><text x="23.2770%" y="495.50">astar_pairwise_alig..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (45 samples, 1.46%)</title><rect x="34.2319%" y="469" width="1.4615%" height="15" fill="rgb(233,210,1)"/><text x="34.4819%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (45 samples, 1.46%)</title><rect x="34.2319%" y="453" width="1.4615%" height="15" fill="rgb(244,137,37)"/><text x="34.4819%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (45 samples, 1.46%)</title><rect x="34.2319%" y="437" width="1.4615%" height="15" fill="rgb(240,136,2)"/><text x="34.4819%" y="447.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (45 samples, 1.46%)</title><rect x="34.2319%" y="421" width="1.4615%" height="15" fill="rgb(239,18,37)"/><text x="34.4819%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 1.46%)</title><rect x="34.2319%" y="405" width="1.4615%" height="15" fill="rgb(218,185,22)"/><text x="34.4819%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 1.46%)</title><rect x="34.2319%" y="389" width="1.4615%" height="15" fill="rgb(225,218,4)"/><text x="34.4819%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45 samples, 1.46%)</title><rect x="34.2319%" y="373" width="1.4615%" height="15" fill="rgb(230,182,32)"/><text x="34.4819%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (42 samples, 1.36%)</title><rect x="34.3293%" y="357" width="1.3641%" height="15" fill="rgb(242,56,43)"/><text x="34.5793%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (18 samples, 0.58%)</title><rect x="35.1088%" y="341" width="0.5846%" height="15" fill="rgb(233,99,24)"/><text x="35.3588%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (18 samples, 0.58%)</title><rect x="35.1088%" y="325" width="0.5846%" height="15" fill="rgb(234,209,42)"/><text x="35.3588%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.52%)</title><rect x="35.1738%" y="309" width="0.5196%" height="15" fill="rgb(227,7,12)"/><text x="35.4238%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.42%)</title><rect x="35.2712%" y="293" width="0.4222%" height="15" fill="rgb(245,203,43)"/><text x="35.5212%" y="303.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::value_with_hint (5 samples, 0.16%)</title><rect x="40.4677%" y="453" width="0.1624%" height="15" fill="rgb(238,205,33)"/><text x="40.7177%" y="463.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::value_with_hint (27 samples, 0.88%)</title><rect x="39.9805%" y="469" width="0.8769%" height="15" fill="rgb(231,56,7)"/><text x="40.2305%" y="479.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (28 samples, 0.91%)</title><rect x="39.9805%" y="485" width="0.9094%" height="15" fill="rgb(244,186,29)"/><text x="40.2305%" y="495.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::seed_ending_at (7 samples, 0.23%)</title><rect x="40.8899%" y="437" width="0.2273%" height="15" fill="rgb(234,111,31)"/><text x="41.1399%" y="447.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_end (9 samples, 0.29%)</title><rect x="40.8899%" y="453" width="0.2923%" height="15" fill="rgb(241,149,10)"/><text x="41.1399%" y="463.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::is_seed_start_or_end (15 samples, 0.49%)</title><rect x="40.8899%" y="485" width="0.4872%" height="15" fill="rgb(249,206,44)"/><text x="41.1399%" y="495.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start_or_end (15 samples, 0.49%)</title><rect x="40.8899%" y="469" width="0.4872%" height="15" fill="rgb(251,153,30)"/><text x="41.1399%" y="479.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start (6 samples, 0.19%)</title><rect x="41.1822%" y="453" width="0.1949%" height="15" fill="rgb(239,152,38)"/><text x="41.4322%" y="463.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::seed_at (5 samples, 0.16%)</title><rect x="41.2147%" y="437" width="0.1624%" height="15" fill="rgb(249,139,47)"/><text x="41.4647%" y="447.50"></text></g><g><title>astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt;::remove (5 samples, 0.16%)</title><rect x="41.6044%" y="453" width="0.1624%" height="15" fill="rgb(244,64,35)"/><text x="41.8544%" y="463.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::update_layers_on_pruning_arrow (11 samples, 0.36%)</title><rect x="41.4420%" y="469" width="0.3573%" height="15" fill="rgb(216,46,15)"/><text x="41.6920%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;astar_pairwise_aligner::contour::Arrow&gt;&gt; (5 samples, 0.16%)</title><rect x="41.7993%" y="469" width="0.1624%" height="15" fill="rgb(250,74,19)"/><text x="42.0493%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.16%)</title><rect x="41.7993%" y="453" width="0.1624%" height="15" fill="rgb(249,42,33)"/><text x="42.0493%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;astar_pairwise_aligner::contour::Arrow,alloc::alloc::Global&gt;&gt; (5 samples, 0.16%)</title><rect x="41.7993%" y="437" width="0.1624%" height="15" fill="rgb(242,149,17)"/><text x="42.0493%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.16%)</title><rect x="41.7993%" y="421" width="0.1624%" height="15" fill="rgb(244,29,21)"/><text x="42.0493%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;astar_pairwise_aligner::contour::Arrow&gt;&gt; (5 samples, 0.16%)</title><rect x="41.7993%" y="405" width="0.1624%" height="15" fill="rgb(220,130,37)"/><text x="42.0493%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.16%)</title><rect x="41.7993%" y="389" width="0.1624%" height="15" fill="rgb(211,67,2)"/><text x="42.0493%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.16%)</title><rect x="41.7993%" y="373" width="0.1624%" height="15" fill="rgb(235,68,52)"/><text x="42.0493%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.16%)</title><rect x="41.7993%" y="357" width="0.1624%" height="15" fill="rgb(246,142,3)"/><text x="42.0493%" y="367.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.16%)</title><rect x="41.7993%" y="341" width="0.1624%" height="15" fill="rgb(241,25,7)"/><text x="42.0493%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.16%)</title><rect x="41.7993%" y="325" width="0.1624%" height="15" fill="rgb(242,119,39)"/><text x="42.0493%" y="335.50"></text></g><g><title>cfree (5 samples, 0.16%)</title><rect x="41.7993%" y="309" width="0.1624%" height="15" fill="rgb(241,98,45)"/><text x="42.0493%" y="319.50"></text></g><g><title>[libc.so.6] (5 samples, 0.16%)</title><rect x="41.7993%" y="293" width="0.1624%" height="15" fill="rgb(254,28,30)"/><text x="42.0493%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (23 samples, 0.75%)</title><rect x="42.0266%" y="373" width="0.7470%" height="15" fill="rgb(241,142,54)"/><text x="42.2766%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (23 samples, 0.75%)</title><rect x="42.0266%" y="357" width="0.7470%" height="15" fill="rgb(222,85,15)"/><text x="42.2766%" y="367.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (23 samples, 0.75%)</title><rect x="42.0266%" y="341" width="0.7470%" height="15" fill="rgb(210,85,47)"/><text x="42.2766%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (26 samples, 0.84%)</title><rect x="42.8061%" y="373" width="0.8444%" height="15" fill="rgb(224,206,25)"/><text x="43.0561%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (26 samples, 0.84%)</title><rect x="42.8061%" y="357" width="0.8444%" height="15" fill="rgb(243,201,19)"/><text x="43.0561%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.84%)</title><rect x="42.8061%" y="341" width="0.8444%" height="15" fill="rgb(236,59,4)"/><text x="43.0561%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (54 samples, 1.75%)</title><rect x="41.9617%" y="469" width="1.7538%" height="15" fill="rgb(254,179,45)"/><text x="42.2117%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (54 samples, 1.75%)</title><rect x="41.9617%" y="453" width="1.7538%" height="15" fill="rgb(226,14,10)"/><text x="42.2117%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (54 samples, 1.75%)</title><rect x="41.9617%" y="437" width="1.7538%" height="15" fill="rgb(244,27,41)"/><text x="42.2117%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (54 samples, 1.75%)</title><rect x="41.9617%" y="421" width="1.7538%" height="15" fill="rgb(235,35,32)"/><text x="42.2117%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (54 samples, 1.75%)</title><rect x="41.9617%" y="405" width="1.7538%" height="15" fill="rgb(218,68,31)"/><text x="42.2117%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (54 samples, 1.75%)</title><rect x="41.9617%" y="389" width="1.7538%" height="15" fill="rgb(207,120,37)"/><text x="42.2117%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.13%)</title><rect x="43.7155%" y="405" width="0.1299%" height="15" fill="rgb(227,98,0)"/><text x="43.9655%" y="415.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::prune (79 samples, 2.57%)</title><rect x="41.3771%" y="485" width="2.5658%" height="15" fill="rgb(207,7,3)"/><text x="41.6271%" y="495.50">&lt;a..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (7 samples, 0.23%)</title><rect x="43.7155%" y="469" width="0.2273%" height="15" fill="rgb(206,98,19)"/><text x="43.9655%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (7 samples, 0.23%)</title><rect x="43.7155%" y="453" width="0.2273%" height="15" fill="rgb(217,5,26)"/><text x="43.9655%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (7 samples, 0.23%)</title><rect x="43.7155%" y="437" width="0.2273%" height="15" fill="rgb(235,190,38)"/><text x="43.9655%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (7 samples, 0.23%)</title><rect x="43.7155%" y="421" width="0.2273%" height="15" fill="rgb(247,86,24)"/><text x="43.9655%" y="431.50"></text></g><g><title>&lt;astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (6 samples, 0.19%)</title><rect x="49.1069%" y="421" width="0.1949%" height="15" fill="rgb(205,101,16)"/><text x="49.3569%" y="431.50"></text></g><g><title>core::cmp::max (4 samples, 0.13%)</title><rect x="49.4641%" y="421" width="0.1299%" height="15" fill="rgb(246,168,33)"/><text x="49.7141%" y="431.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.13%)</title><rect x="49.4641%" y="405" width="0.1299%" height="15" fill="rgb(231,114,1)"/><text x="49.7141%" y="415.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::value_with_hint (4 samples, 0.13%)</title><rect x="49.4641%" y="389" width="0.1299%" height="15" fill="rgb(207,184,53)"/><text x="49.7141%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.13%)</title><rect x="49.6590%" y="421" width="0.1299%" height="15" fill="rgb(224,95,51)"/><text x="49.9090%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.13%)</title><rect x="49.6590%" y="405" width="0.1299%" height="15" fill="rgb(212,188,45)"/><text x="49.9090%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4 samples, 0.13%)</title><rect x="49.6590%" y="389" width="0.1299%" height="15" fill="rgb(223,154,38)"/><text x="49.9090%" y="399.50"></text></g><g><title>astar_pairwise_aligner::heuristic::seed::SHI::value_with_hint (43 samples, 1.40%)</title><rect x="48.4248%" y="437" width="1.3966%" height="15" fill="rgb(251,22,52)"/><text x="48.6748%" y="447.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (46 samples, 1.49%)</title><rect x="48.4248%" y="453" width="1.4940%" height="15" fill="rgb(229,209,22)"/><text x="48.6748%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.13%)</title><rect x="50.5359%" y="373" width="0.1299%" height="15" fill="rgb(234,138,34)"/><text x="50.7859%" y="383.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::seed_ending_at (18 samples, 0.58%)</title><rect x="50.1137%" y="405" width="0.5846%" height="15" fill="rgb(212,95,11)"/><text x="50.3637%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.16%)</title><rect x="50.5359%" y="389" width="0.1624%" height="15" fill="rgb(240,179,47)"/><text x="50.7859%" y="399.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_end (29 samples, 0.94%)</title><rect x="50.1137%" y="421" width="0.9419%" height="15" fill="rgb(240,163,11)"/><text x="50.3637%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (11 samples, 0.36%)</title><rect x="50.6983%" y="405" width="0.3573%" height="15" fill="rgb(236,37,12)"/><text x="50.9483%" y="415.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_end::{{closure}} (11 samples, 0.36%)</title><rect x="50.6983%" y="389" width="0.3573%" height="15" fill="rgb(232,164,16)"/><text x="50.9483%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.19%)</title><rect x="51.3478%" y="389" width="0.1949%" height="15" fill="rgb(244,205,15)"/><text x="51.5978%" y="399.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::seed_at (15 samples, 0.49%)</title><rect x="51.0880%" y="405" width="0.4872%" height="15" fill="rgb(223,117,47)"/><text x="51.3380%" y="415.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::seed::SHI as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::is_seed_start_or_end (61 samples, 1.98%)</title><rect x="49.9188%" y="453" width="1.9812%" height="15" fill="rgb(244,107,35)"/><text x="50.1688%" y="463.50">&lt;..</text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start_or_end (61 samples, 1.98%)</title><rect x="49.9188%" y="437" width="1.9812%" height="15" fill="rgb(205,140,8)"/><text x="50.1688%" y="447.50">a..</text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start (26 samples, 0.84%)</title><rect x="51.0555%" y="421" width="0.8444%" height="15" fill="rgb(228,84,46)"/><text x="51.3055%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (10 samples, 0.32%)</title><rect x="51.5752%" y="405" width="0.3248%" height="15" fill="rgb(254,188,9)"/><text x="51.8252%" y="415.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start::{{closure}} (10 samples, 0.32%)</title><rect x="51.5752%" y="389" width="0.3248%" height="15" fill="rgb(206,112,54)"/><text x="51.8252%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (30 samples, 0.97%)</title><rect x="52.0299%" y="373" width="0.9743%" height="15" fill="rgb(216,84,49)"/><text x="52.2799%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (30 samples, 0.97%)</title><rect x="52.0299%" y="357" width="0.9743%" height="15" fill="rgb(214,194,35)"/><text x="52.2799%" y="367.50"></text></g><g><title>core::ptr::write (30 samples, 0.97%)</title><rect x="52.0299%" y="341" width="0.9743%" height="15" fill="rgb(249,28,3)"/><text x="52.2799%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (9 samples, 0.29%)</title><rect x="53.0692%" y="357" width="0.2923%" height="15" fill="rgb(222,56,52)"/><text x="53.3192%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (49 samples, 1.59%)</title><rect x="51.9000%" y="437" width="1.5914%" height="15" fill="rgb(245,217,50)"/><text x="52.1500%" y="447.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (49 samples, 1.59%)</title><rect x="51.9000%" y="421" width="1.5914%" height="15" fill="rgb(213,201,24)"/><text x="52.1500%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (49 samples, 1.59%)</title><rect x="51.9000%" y="405" width="1.5914%" height="15" fill="rgb(248,116,28)"/><text x="52.1500%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (47 samples, 1.53%)</title><rect x="51.9649%" y="389" width="1.5265%" height="15" fill="rgb(219,72,43)"/><text x="52.2149%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (13 samples, 0.42%)</title><rect x="53.0692%" y="373" width="0.4222%" height="15" fill="rgb(209,138,14)"/><text x="53.3192%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (4 samples, 0.13%)</title><rect x="53.3615%" y="357" width="0.1299%" height="15" fill="rgb(222,18,33)"/><text x="53.6115%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (4 samples, 0.13%)</title><rect x="53.3615%" y="341" width="0.1299%" height="15" fill="rgb(213,199,7)"/><text x="53.6115%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.45%)</title><rect x="54.6281%" y="325" width="0.4547%" height="15" fill="rgb(250,110,10)"/><text x="54.8781%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (8 samples, 0.26%)</title><rect x="55.0828%" y="325" width="0.2598%" height="15" fill="rgb(248,123,6)"/><text x="55.3328%" y="335.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (8 samples, 0.26%)</title><rect x="55.0828%" y="309" width="0.2598%" height="15" fill="rgb(206,91,31)"/><text x="55.3328%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.26%)</title><rect x="55.0828%" y="293" width="0.2598%" height="15" fill="rgb(211,154,13)"/><text x="55.3328%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.26%)</title><rect x="55.0828%" y="277" width="0.2598%" height="15" fill="rgb(225,148,7)"/><text x="55.3328%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.26%)</title><rect x="55.0828%" y="261" width="0.2598%" height="15" fill="rgb(220,160,43)"/><text x="55.3328%" y="271.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::hash::Hash&gt;::hash (8 samples, 0.26%)</title><rect x="55.0828%" y="245" width="0.2598%" height="15" fill="rgb(213,52,39)"/><text x="55.3328%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (4 samples, 0.13%)</title><rect x="55.2127%" y="229" width="0.1299%" height="15" fill="rgb(243,137,7)"/><text x="55.4627%" y="239.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (4 samples, 0.13%)</title><rect x="55.2127%" y="213" width="0.1299%" height="15" fill="rgb(230,79,13)"/><text x="55.4627%" y="223.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (4 samples, 0.13%)</title><rect x="55.2127%" y="197" width="0.1299%" height="15" fill="rgb(247,105,23)"/><text x="55.4627%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (7 samples, 0.23%)</title><rect x="55.3426%" y="325" width="0.2273%" height="15" fill="rgb(223,179,41)"/><text x="55.5926%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.16%)</title><rect x="55.9597%" y="293" width="0.1624%" height="15" fill="rgb(218,9,34)"/><text x="56.2097%" y="303.50"></text></g><g><title>hashbrown::raw::is_full (15 samples, 0.49%)</title><rect x="56.1221%" y="293" width="0.4872%" height="15" fill="rgb(222,106,8)"/><text x="56.3721%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (21 samples, 0.68%)</title><rect x="56.6093%" y="293" width="0.6820%" height="15" fill="rgb(211,220,0)"/><text x="56.8593%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (21 samples, 0.68%)</title><rect x="56.6093%" y="277" width="0.6820%" height="15" fill="rgb(229,52,16)"/><text x="56.8593%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.68%)</title><rect x="56.6093%" y="261" width="0.6820%" height="15" fill="rgb(212,155,18)"/><text x="56.8593%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (59 samples, 1.92%)</title><rect x="55.5700%" y="309" width="1.9162%" height="15" fill="rgb(242,21,14)"/><text x="55.8200%" y="319.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 0.19%)</title><rect x="57.2913%" y="293" width="0.1949%" height="15" fill="rgb(222,19,48)"/><text x="57.5413%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.19%)</title><rect x="57.2913%" y="277" width="0.1949%" height="15" fill="rgb(232,45,27)"/><text x="57.5413%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (62 samples, 2.01%)</title><rect x="55.5700%" y="325" width="2.0136%" height="15" fill="rgb(249,103,42)"/><text x="55.8200%" y="335.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (111 samples, 3.61%)</title><rect x="54.0435%" y="405" width="3.6051%" height="15" fill="rgb(246,81,33)"/><text x="54.2935%" y="415.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (111 samples, 3.61%)</title><rect x="54.0435%" y="389" width="3.6051%" height="15" fill="rgb(252,33,42)"/><text x="54.2935%" y="399.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (100 samples, 3.25%)</title><rect x="54.4008%" y="373" width="3.2478%" height="15" fill="rgb(209,212,41)"/><text x="54.6508%" y="383.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (100 samples, 3.25%)</title><rect x="54.4008%" y="357" width="3.2478%" height="15" fill="rgb(207,154,6)"/><text x="54.6508%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (98 samples, 3.18%)</title><rect x="54.4657%" y="341" width="3.1829%" height="15" fill="rgb(223,64,47)"/><text x="54.7157%" y="351.50">has..</text></g><g><title>hashbrown::map::make_insert_hash (5 samples, 0.16%)</title><rect x="57.6486%" y="405" width="0.1624%" height="15" fill="rgb(211,161,38)"/><text x="57.8986%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="57.6486%" y="389" width="0.1624%" height="15" fill="rgb(219,138,40)"/><text x="57.8986%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.16%)</title><rect x="57.6486%" y="373" width="0.1624%" height="15" fill="rgb(241,228,46)"/><text x="57.8986%" y="383.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::hash::Hash&gt;::hash (5 samples, 0.16%)</title><rect x="57.6486%" y="357" width="0.1624%" height="15" fill="rgb(223,209,38)"/><text x="57.8986%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (5 samples, 0.16%)</title><rect x="57.6486%" y="341" width="0.1624%" height="15" fill="rgb(236,164,45)"/><text x="57.8986%" y="351.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (5 samples, 0.16%)</title><rect x="57.6486%" y="325" width="0.1624%" height="15" fill="rgb(231,15,5)"/><text x="57.8986%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.65%)</title><rect x="58.8178%" y="373" width="0.6496%" height="15" fill="rgb(252,35,15)"/><text x="59.0678%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (20 samples, 0.65%)</title><rect x="58.8178%" y="357" width="0.6496%" height="15" fill="rgb(248,181,18)"/><text x="59.0678%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.13%)</title><rect x="59.5323%" y="357" width="0.1299%" height="15" fill="rgb(233,39,42)"/><text x="59.7823%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.13%)</title><rect x="59.5323%" y="341" width="0.1299%" height="15" fill="rgb(238,110,33)"/><text x="59.7823%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (11 samples, 0.36%)</title><rect x="59.5323%" y="373" width="0.3573%" height="15" fill="rgb(233,195,10)"/><text x="59.7823%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (7 samples, 0.23%)</title><rect x="59.6622%" y="357" width="0.2273%" height="15" fill="rgb(254,105,3)"/><text x="59.9122%" y="367.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (7 samples, 0.23%)</title><rect x="59.6622%" y="341" width="0.2273%" height="15" fill="rgb(221,225,9)"/><text x="59.9122%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (8 samples, 0.26%)</title><rect x="59.8896%" y="373" width="0.2598%" height="15" fill="rgb(224,227,45)"/><text x="60.1396%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (225 samples, 7.31%)</title><rect x="60.1819%" y="373" width="7.3076%" height="15" fill="rgb(229,198,43)"/><text x="60.4319%" y="383.50">hashbrown:..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (225 samples, 7.31%)</title><rect x="60.1819%" y="357" width="7.3076%" height="15" fill="rgb(206,209,35)"/><text x="60.4319%" y="367.50">core::core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (225 samples, 7.31%)</title><rect x="60.1819%" y="341" width="7.3076%" height="15" fill="rgb(245,195,53)"/><text x="60.4319%" y="351.50">core::intr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.58%)</title><rect x="67.4894%" y="373" width="0.5846%" height="15" fill="rgb(240,92,26)"/><text x="67.7394%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.58%)</title><rect x="67.4894%" y="357" width="0.5846%" height="15" fill="rgb(207,40,23)"/><text x="67.7394%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (462 samples, 15.00%)</title><rect x="53.5563%" y="421" width="15.0049%" height="15" fill="rgb(223,111,35)"/><text x="53.8063%" y="431.50">hashbrown::rustc_entry:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (331 samples, 10.75%)</title><rect x="57.8110%" y="405" width="10.7502%" height="15" fill="rgb(229,147,28)"/><text x="58.0610%" y="415.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (331 samples, 10.75%)</title><rect x="57.8110%" y="389" width="10.7502%" height="15" fill="rgb(211,29,28)"/><text x="58.0610%" y="399.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (15 samples, 0.49%)</title><rect x="68.0741%" y="373" width="0.4872%" height="15" fill="rgb(228,72,33)"/><text x="68.3241%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.49%)</title><rect x="68.0741%" y="357" width="0.4872%" height="15" fill="rgb(205,214,31)"/><text x="68.3241%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.49%)</title><rect x="68.0741%" y="341" width="0.4872%" height="15" fill="rgb(224,111,15)"/><text x="68.3241%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as astar_pairwise_aligner::datastructures::diagonal_map::DiagonalMapTrait&lt;astar_pairwise_aligner::alignment_graph::Pos,V&gt;&gt;::get_mut (605 samples, 19.65%)</title><rect x="51.9000%" y="453" width="19.6492%" height="15" fill="rgb(253,21,26)"/><text x="52.1500%" y="463.50">&lt;std::collections::hash::map::H..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (556 samples, 18.06%)</title><rect x="53.4914%" y="437" width="18.0578%" height="15" fill="rgb(245,139,43)"/><text x="53.7414%" y="447.50">std::collections::hash::map:..</text></g><g><title>std::collections::hash::map::map_entry (92 samples, 2.99%)</title><rect x="68.5612%" y="421" width="2.9880%" height="15" fill="rgb(252,170,7)"/><text x="68.8112%" y="431.50">std..</text></g><g><title>astar_pairwise_aligner::alignment_graph::Edge::cost (5 samples, 0.16%)</title><rect x="71.5492%" y="453" width="0.1624%" height="15" fill="rgb(231,118,14)"/><text x="71.7992%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.16%)</title><rect x="72.3287%" y="437" width="0.1624%" height="15" fill="rgb(238,83,0)"/><text x="72.5787%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (5 samples, 0.16%)</title><rect x="72.3287%" y="421" width="0.1624%" height="15" fill="rgb(221,39,39)"/><text x="72.5787%" y="431.50"></text></g><g><title>astar_pairwise_aligner::alignment_graph::EditGraph::is_match (28 samples, 0.91%)</title><rect x="71.7116%" y="453" width="0.9094%" height="15" fill="rgb(222,119,46)"/><text x="71.9616%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.13%)</title><rect x="72.4911%" y="437" width="0.1299%" height="15" fill="rgb(222,165,49)"/><text x="72.7411%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.13%)</title><rect x="72.4911%" y="421" width="0.1299%" height="15" fill="rgb(219,113,52)"/><text x="72.7411%" y="431.50"></text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (32 samples, 1.04%)</title><rect x="72.6210%" y="453" width="1.0393%" height="15" fill="rgb(214,7,15)"/><text x="72.8710%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (25 samples, 0.81%)</title><rect x="73.9526%" y="373" width="0.8120%" height="15" fill="rgb(235,32,4)"/><text x="74.2026%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (25 samples, 0.81%)</title><rect x="73.9526%" y="357" width="0.8120%" height="15" fill="rgb(238,90,54)"/><text x="74.2026%" y="367.50"></text></g><g><title>alloc::alloc::realloc (25 samples, 0.81%)</title><rect x="73.9526%" y="341" width="0.8120%" height="15" fill="rgb(213,208,19)"/><text x="74.2026%" y="351.50"></text></g><g><title>__rdl_realloc (25 samples, 0.81%)</title><rect x="73.9526%" y="325" width="0.8120%" height="15" fill="rgb(233,156,4)"/><text x="74.2026%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (25 samples, 0.81%)</title><rect x="73.9526%" y="309" width="0.8120%" height="15" fill="rgb(207,194,5)"/><text x="74.2026%" y="319.50"></text></g><g><title>realloc (25 samples, 0.81%)</title><rect x="73.9526%" y="293" width="0.8120%" height="15" fill="rgb(206,111,30)"/><text x="74.2026%" y="303.50"></text></g><g><title>[libc.so.6] (25 samples, 0.81%)</title><rect x="73.9526%" y="277" width="0.8120%" height="15" fill="rgb(243,70,54)"/><text x="74.2026%" y="287.50"></text></g><g><title>[libc.so.6] (21 samples, 0.68%)</title><rect x="74.0825%" y="261" width="0.6820%" height="15" fill="rgb(242,28,8)"/><text x="74.3325%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.13%)</title><rect x="74.6346%" y="245" width="0.1299%" height="15" fill="rgb(219,106,18)"/><text x="74.8846%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 1.10%)</title><rect x="73.8876%" y="421" width="1.1043%" height="15" fill="rgb(244,222,10)"/><text x="74.1376%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (34 samples, 1.10%)</title><rect x="73.8876%" y="405" width="1.1043%" height="15" fill="rgb(236,179,52)"/><text x="74.1376%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 1.04%)</title><rect x="73.9526%" y="389" width="1.0393%" height="15" fill="rgb(213,23,39)"/><text x="74.2026%" y="399.50"></text></g><g><title>malloc (7 samples, 0.23%)</title><rect x="74.7645%" y="373" width="0.2273%" height="15" fill="rgb(238,48,10)"/><text x="75.0145%" y="383.50"></text></g><g><title>[libc.so.6] (5 samples, 0.16%)</title><rect x="74.8295%" y="357" width="0.1624%" height="15" fill="rgb(251,196,23)"/><text x="75.0795%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45 samples, 1.46%)</title><rect x="73.7902%" y="437" width="1.4615%" height="15" fill="rgb(250,152,24)"/><text x="74.0402%" y="447.50"></text></g><g><title>core::ptr::write (5 samples, 0.16%)</title><rect x="75.0893%" y="421" width="0.1624%" height="15" fill="rgb(209,150,17)"/><text x="75.3393%" y="431.50"></text></g><g><title>astar_pairwise_aligner::alignment_graph::EditGraph::iterate_outgoing_edges (969 samples, 31.47%)</title><rect x="43.9428%" y="485" width="31.4713%" height="15" fill="rgb(234,202,34)"/><text x="44.1928%" y="495.50">astar_pairwise_aligner::alignment_graph::EditGraph:..</text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (944 samples, 30.66%)</title><rect x="44.7548%" y="469" width="30.6593%" height="15" fill="rgb(253,148,53)"/><text x="45.0048%" y="479.50">astar_pairwise_aligner::astar::astar::{{closure}}</text></g><g><title>astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;T&gt;::push (54 samples, 1.75%)</title><rect x="73.6603%" y="453" width="1.7538%" height="15" fill="rgb(218,129,16)"/><text x="73.9103%" y="463.50"></text></g><g><title>core::cmp::min (4 samples, 0.13%)</title><rect x="75.2842%" y="437" width="0.1299%" height="15" fill="rgb(216,85,19)"/><text x="75.5342%" y="447.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.13%)</title><rect x="75.2842%" y="421" width="0.1299%" height="15" fill="rgb(235,228,7)"/><text x="75.5342%" y="431.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.13%)</title><rect x="75.2842%" y="405" width="0.1299%" height="15" fill="rgb(245,175,0)"/><text x="75.5342%" y="415.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (9 samples, 0.29%)</title><rect x="75.4141%" y="485" width="0.2923%" height="15" fill="rgb(208,168,36)"/><text x="75.6641%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.49%)</title><rect x="75.9987%" y="469" width="0.4872%" height="15" fill="rgb(246,171,24)"/><text x="76.2487%" y="479.50"></text></g><g><title>core::ptr::write (6 samples, 0.19%)</title><rect x="76.2910%" y="453" width="0.1949%" height="15" fill="rgb(215,142,24)"/><text x="76.5410%" y="463.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (10 samples, 0.32%)</title><rect x="76.5508%" y="469" width="0.3248%" height="15" fill="rgb(250,187,7)"/><text x="76.8008%" y="479.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.23%)</title><rect x="78.0123%" y="453" width="0.2273%" height="15" fill="rgb(228,66,33)"/><text x="78.2623%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.16%)</title><rect x="78.0773%" y="437" width="0.1624%" height="15" fill="rgb(234,215,21)"/><text x="78.3273%" y="447.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (5 samples, 0.16%)</title><rect x="78.0773%" y="421" width="0.1624%" height="15" fill="rgb(222,191,20)"/><text x="78.3273%" y="431.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (4 samples, 0.13%)</title><rect x="78.4021%" y="277" width="0.1299%" height="15" fill="rgb(245,79,54)"/><text x="78.6521%" y="287.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (15 samples, 0.49%)</title><rect x="78.2722%" y="309" width="0.4872%" height="15" fill="rgb(240,10,37)"/><text x="78.5222%" y="319.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (11 samples, 0.36%)</title><rect x="78.4021%" y="293" width="0.3573%" height="15" fill="rgb(214,192,32)"/><text x="78.6521%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (7 samples, 0.23%)</title><rect x="78.5320%" y="277" width="0.2273%" height="15" fill="rgb(209,36,54)"/><text x="78.7820%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.58%)</title><rect x="78.2722%" y="389" width="0.5846%" height="15" fill="rgb(220,10,11)"/><text x="78.5222%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.58%)</title><rect x="78.2722%" y="373" width="0.5846%" height="15" fill="rgb(221,106,17)"/><text x="78.5222%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.58%)</title><rect x="78.2722%" y="357" width="0.5846%" height="15" fill="rgb(251,142,44)"/><text x="78.5222%" y="367.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::hash::Hash&gt;::hash (18 samples, 0.58%)</title><rect x="78.2722%" y="341" width="0.5846%" height="15" fill="rgb(238,13,15)"/><text x="78.5222%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (18 samples, 0.58%)</title><rect x="78.2722%" y="325" width="0.5846%" height="15" fill="rgb(208,107,27)"/><text x="78.5222%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.65%)</title><rect x="82.7541%" y="341" width="0.6496%" height="15" fill="rgb(205,136,37)"/><text x="83.0041%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (20 samples, 0.65%)</title><rect x="82.7541%" y="325" width="0.6496%" height="15" fill="rgb(250,205,27)"/><text x="83.0041%" y="335.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (12 samples, 0.39%)</title><rect x="83.4037%" y="341" width="0.3897%" height="15" fill="rgb(210,80,43)"/><text x="83.6537%" y="351.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.23%)</title><rect x="83.7934%" y="341" width="0.2273%" height="15" fill="rgb(247,160,36)"/><text x="84.0434%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (129 samples, 4.19%)</title><rect x="84.0208%" y="325" width="4.1897%" height="15" fill="rgb(234,13,49)"/><text x="84.2708%" y="335.50">hashb..</text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (129 samples, 4.19%)</title><rect x="84.0208%" y="309" width="4.1897%" height="15" fill="rgb(234,122,0)"/><text x="84.2708%" y="319.50">&lt;asta..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (131 samples, 4.25%)</title><rect x="84.0208%" y="341" width="4.2546%" height="15" fill="rgb(207,146,38)"/><text x="84.2708%" y="351.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.13%)</title><rect x="88.2754%" y="341" width="0.1299%" height="15" fill="rgb(207,177,25)"/><text x="88.5254%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.23%)</title><rect x="88.4053%" y="341" width="0.2273%" height="15" fill="rgb(211,178,42)"/><text x="88.6553%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (188 samples, 6.11%)</title><rect x="88.6327%" y="341" width="6.1059%" height="15" fill="rgb(230,69,54)"/><text x="88.8827%" y="351.50">hashbrow..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (188 samples, 6.11%)</title><rect x="88.6327%" y="325" width="6.1059%" height="15" fill="rgb(214,135,41)"/><text x="88.8827%" y="335.50">core::co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (188 samples, 6.11%)</title><rect x="88.6327%" y="309" width="6.1059%" height="15" fill="rgb(237,67,25)"/><text x="88.8827%" y="319.50">core::in..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 0.75%)</title><rect x="94.7386%" y="341" width="0.7470%" height="15" fill="rgb(222,189,50)"/><text x="94.9886%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.75%)</title><rect x="94.7386%" y="325" width="0.7470%" height="15" fill="rgb(245,148,34)"/><text x="94.9886%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as astar_pairwise_aligner::datastructures::diagonal_map::DiagonalMapTrait&lt;astar_pairwise_aligner::alignment_graph::Pos,V&gt;&gt;::get (546 samples, 17.73%)</title><rect x="78.2397%" y="453" width="17.7330%" height="15" fill="rgb(222,29,6)"/><text x="78.4897%" y="463.50">&lt;std::collections::hash::map..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (546 samples, 17.73%)</title><rect x="78.2397%" y="437" width="17.7330%" height="15" fill="rgb(221,189,43)"/><text x="78.4897%" y="447.50">std::collections::hash::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (546 samples, 17.73%)</title><rect x="78.2397%" y="421" width="17.7330%" height="15" fill="rgb(207,36,27)"/><text x="78.4897%" y="431.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (546 samples, 17.73%)</title><rect x="78.2397%" y="405" width="17.7330%" height="15" fill="rgb(217,90,24)"/><text x="78.4897%" y="415.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (527 samples, 17.12%)</title><rect x="78.8568%" y="389" width="17.1159%" height="15" fill="rgb(224,66,35)"/><text x="79.1068%" y="399.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (527 samples, 17.12%)</title><rect x="78.8568%" y="373" width="17.1159%" height="15" fill="rgb(221,13,50)"/><text x="79.1068%" y="383.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (527 samples, 17.12%)</title><rect x="78.8568%" y="357" width="17.1159%" height="15" fill="rgb(236,68,49)"/><text x="79.1068%" y="367.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (15 samples, 0.49%)</title><rect x="95.4855%" y="341" width="0.4872%" height="15" fill="rgb(229,146,28)"/><text x="95.7355%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.49%)</title><rect x="95.4855%" y="325" width="0.4872%" height="15" fill="rgb(225,31,38)"/><text x="95.7355%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.49%)</title><rect x="95.4855%" y="309" width="0.4872%" height="15" fill="rgb(250,208,3)"/><text x="95.7355%" y="319.50"></text></g><g><title>astar_pairwise_aligner::astar::parent (600 samples, 19.49%)</title><rect x="76.8756%" y="469" width="19.4868%" height="15" fill="rgb(246,54,23)"/><text x="77.1256%" y="479.50">astar_pairwise_aligner::astar::..</text></g><g><title>astar_pairwise_aligner::astar::astar (9 samples, 0.29%)</title><rect x="96.0702%" y="453" width="0.2923%" height="15" fill="rgb(243,76,11)"/><text x="96.3202%" y="463.50"></text></g><g><title>core::ptr::read (5 samples, 0.16%)</title><rect x="96.3625%" y="405" width="0.1624%" height="15" fill="rgb(245,21,50)"/><text x="96.6125%" y="415.50"></text></g><g><title>astar_pairwise_aligner::astar::traceback (650 samples, 21.11%)</title><rect x="75.7064%" y="485" width="21.1108%" height="15" fill="rgb(228,9,43)"/><text x="75.9564%" y="495.50">astar_pairwise_aligner::astar::tr..</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (14 samples, 0.45%)</title><rect x="96.3625%" y="469" width="0.4547%" height="15" fill="rgb(208,100,47)"/><text x="96.6125%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (14 samples, 0.45%)</title><rect x="96.3625%" y="453" width="0.4547%" height="15" fill="rgb(232,26,8)"/><text x="96.6125%" y="463.50"></text></g><g><title>core::mem::swap (14 samples, 0.45%)</title><rect x="96.3625%" y="437" width="0.4547%" height="15" fill="rgb(216,166,38)"/><text x="96.6125%" y="447.50"></text></g><g><title>core::mem::swap_simple (14 samples, 0.45%)</title><rect x="96.3625%" y="421" width="0.4547%" height="15" fill="rgb(251,202,51)"/><text x="96.6125%" y="431.50"></text></g><g><title>core::ptr::write (9 samples, 0.29%)</title><rect x="96.5248%" y="405" width="0.2923%" height="15" fill="rgb(254,216,34)"/><text x="96.7748%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.26%)</title><rect x="97.1744%" y="469" width="0.2598%" height="15" fill="rgb(251,32,27)"/><text x="97.4244%" y="479.50"></text></g><g><title>astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;T&gt;::pop (21 samples, 0.68%)</title><rect x="96.8171%" y="485" width="0.6820%" height="15" fill="rgb(208,127,28)"/><text x="97.0671%" y="495.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (26 samples, 0.84%)</title><rect x="97.9864%" y="357" width="0.8444%" height="15" fill="rgb(224,137,22)"/><text x="98.2364%" y="367.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (26 samples, 0.84%)</title><rect x="97.9864%" y="341" width="0.8444%" height="15" fill="rgb(254,70,32)"/><text x="98.2364%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (29 samples, 0.94%)</title><rect x="97.9864%" y="373" width="0.9419%" height="15" fill="rgb(229,75,37)"/><text x="98.2364%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.16%)</title><rect x="98.9607%" y="373" width="0.1624%" height="15" fill="rgb(252,64,23)"/><text x="99.2107%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.16%)</title><rect x="98.9607%" y="357" width="0.1624%" height="15" fill="rgb(232,162,48)"/><text x="99.2107%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.16%)</title><rect x="98.9607%" y="341" width="0.1624%" height="15" fill="rgb(246,160,12)"/><text x="99.2107%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.23%)</title><rect x="99.1231%" y="373" width="0.2273%" height="15" fill="rgb(247,166,0)"/><text x="99.3731%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.23%)</title><rect x="99.1231%" y="357" width="0.2273%" height="15" fill="rgb(249,219,21)"/><text x="99.3731%" y="367.50"></text></g><g><title>astar_pairwise_aligner::datastructures::diagonal_map::&lt;impl core::ops::index::IndexMut&lt;astar_pairwise_aligner::alignment_graph::Pos&gt; for std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::index_mut (59 samples, 1.92%)</title><rect x="97.5641%" y="485" width="1.9162%" height="15" fill="rgb(205,209,3)"/><text x="97.8141%" y="495.50">a..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (59 samples, 1.92%)</title><rect x="97.5641%" y="469" width="1.9162%" height="15" fill="rgb(243,44,1)"/><text x="97.8141%" y="479.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (58 samples, 1.88%)</title><rect x="97.5966%" y="453" width="1.8837%" height="15" fill="rgb(206,159,16)"/><text x="97.8466%" y="463.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (58 samples, 1.88%)</title><rect x="97.5966%" y="437" width="1.8837%" height="15" fill="rgb(244,77,30)"/><text x="97.8466%" y="447.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (56 samples, 1.82%)</title><rect x="97.6616%" y="421" width="1.8188%" height="15" fill="rgb(218,69,12)"/><text x="97.9116%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (56 samples, 1.82%)</title><rect x="97.6616%" y="405" width="1.8188%" height="15" fill="rgb(212,87,7)"/><text x="97.9116%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (56 samples, 1.82%)</title><rect x="97.6616%" y="389" width="1.8188%" height="15" fill="rgb(245,114,25)"/><text x="97.9116%" y="399.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (4 samples, 0.13%)</title><rect x="99.3504%" y="373" width="0.1299%" height="15" fill="rgb(210,61,42)"/><text x="99.6004%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.13%)</title><rect x="99.3504%" y="357" width="0.1299%" height="15" fill="rgb(211,52,33)"/><text x="99.6004%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.13%)</title><rect x="99.3504%" y="341" width="0.1299%" height="15" fill="rgb(234,58,33)"/><text x="99.6004%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.36%)</title><rect x="99.4804%" y="373" width="0.3573%" height="15" fill="rgb(220,115,36)"/><text x="99.7304%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.36%)</title><rect x="99.4804%" y="357" width="0.3573%" height="15" fill="rgb(243,153,54)"/><text x="99.7304%" y="367.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.36%)</title><rect x="99.4804%" y="341" width="0.3573%" height="15" fill="rgb(251,47,18)"/><text x="99.7304%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.36%)</title><rect x="99.4804%" y="325" width="0.3573%" height="15" fill="rgb(242,102,42)"/><text x="99.7304%" y="335.50"></text></g><g><title>cfree (11 samples, 0.36%)</title><rect x="99.4804%" y="309" width="0.3573%" height="15" fill="rgb(234,31,38)"/><text x="99.7304%" y="319.50"></text></g><g><title>[libc.so.6] (8 samples, 0.26%)</title><rect x="99.5778%" y="293" width="0.2598%" height="15" fill="rgb(221,117,51)"/><text x="99.8278%" y="303.50"></text></g><g><title>[libc.so.6] (5 samples, 0.16%)</title><rect x="99.6752%" y="277" width="0.1624%" height="15" fill="rgb(212,20,18)"/><text x="99.9252%" y="287.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (1,975 samples, 64.14%)</title><rect x="35.7259%" y="501" width="64.1442%" height="15" fill="rgb(245,133,36)"/><text x="35.9759%" y="511.50">astar_pairwise_aligner::astar::astar</text></g><g><title>core::ptr::drop_in_place&lt;astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;(astar_pairwise_aligner::alignment_graph::Pos,u32)&gt;&gt; (12 samples, 0.39%)</title><rect x="99.4804%" y="485" width="0.3897%" height="15" fill="rgb(212,6,19)"/><text x="99.7304%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(astar_pairwise_aligner::alignment_graph::Pos,u32)&gt;&gt;&gt; (12 samples, 0.39%)</title><rect x="99.4804%" y="469" width="0.3897%" height="15" fill="rgb(218,1,36)"/><text x="99.7304%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.39%)</title><rect x="99.4804%" y="453" width="0.3897%" height="15" fill="rgb(246,84,54)"/><text x="99.7304%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(astar_pairwise_aligner::alignment_graph::Pos,u32)&gt;]&gt; (12 samples, 0.39%)</title><rect x="99.4804%" y="437" width="0.3897%" height="15" fill="rgb(242,110,6)"/><text x="99.7304%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(astar_pairwise_aligner::alignment_graph::Pos,u32)&gt;&gt; (12 samples, 0.39%)</title><rect x="99.4804%" y="421" width="0.3897%" height="15" fill="rgb(214,47,5)"/><text x="99.7304%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(astar_pairwise_aligner::alignment_graph::Pos,u32)&gt;&gt; (12 samples, 0.39%)</title><rect x="99.4804%" y="405" width="0.3897%" height="15" fill="rgb(218,159,25)"/><text x="99.7304%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.39%)</title><rect x="99.4804%" y="389" width="0.3897%" height="15" fill="rgb(215,211,28)"/><text x="99.7304%" y="399.50"></text></g><g><title>all (3,079 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(238,59,32)"/><text x="0.2500%" y="863.50"></text></g><g><title>astar-pairwise- (3,079 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(226,82,3)"/><text x="0.2500%" y="847.50">astar-pairwise-</text></g><g><title>_start (2,751 samples, 89.35%)</title><rect x="10.6528%" y="821" width="89.3472%" height="15" fill="rgb(240,164,32)"/><text x="10.9028%" y="831.50">_start</text></g><g><title>__libc_start_main (2,751 samples, 89.35%)</title><rect x="10.6528%" y="805" width="89.3472%" height="15" fill="rgb(232,46,7)"/><text x="10.9028%" y="815.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,751 samples, 89.35%)</title><rect x="10.6528%" y="789" width="89.3472%" height="15" fill="rgb(229,129,53)"/><text x="10.9028%" y="799.50">[libc.so.6]</text></g><g><title>main (2,751 samples, 89.35%)</title><rect x="10.6528%" y="773" width="89.3472%" height="15" fill="rgb(234,188,29)"/><text x="10.9028%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (2,751 samples, 89.35%)</title><rect x="10.6528%" y="757" width="89.3472%" height="15" fill="rgb(246,141,4)"/><text x="10.9028%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,751 samples, 89.35%)</title><rect x="10.6528%" y="741" width="89.3472%" height="15" fill="rgb(229,23,39)"/><text x="10.9028%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,751 samples, 89.35%)</title><rect x="10.6528%" y="725" width="89.3472%" height="15" fill="rgb(206,12,3)"/><text x="10.9028%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,751 samples, 89.35%)</title><rect x="10.6528%" y="709" width="89.3472%" height="15" fill="rgb(252,226,20)"/><text x="10.9028%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,751 samples, 89.35%)</title><rect x="10.6528%" y="693" width="89.3472%" height="15" fill="rgb(216,123,35)"/><text x="10.9028%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,751 samples, 89.35%)</title><rect x="10.6528%" y="677" width="89.3472%" height="15" fill="rgb(212,68,40)"/><text x="10.9028%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,751 samples, 89.35%)</title><rect x="10.6528%" y="661" width="89.3472%" height="15" fill="rgb(254,125,32)"/><text x="10.9028%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,751 samples, 89.35%)</title><rect x="10.6528%" y="645" width="89.3472%" height="15" fill="rgb(253,97,22)"/><text x="10.9028%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,751 samples, 89.35%)</title><rect x="10.6528%" y="629" width="89.3472%" height="15" fill="rgb(241,101,14)"/><text x="10.9028%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,751 samples, 89.35%)</title><rect x="10.6528%" y="613" width="89.3472%" height="15" fill="rgb(238,103,29)"/><text x="10.9028%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,751 samples, 89.35%)</title><rect x="10.6528%" y="597" width="89.3472%" height="15" fill="rgb(233,195,47)"/><text x="10.9028%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,751 samples, 89.35%)</title><rect x="10.6528%" y="581" width="89.3472%" height="15" fill="rgb(246,218,30)"/><text x="10.9028%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>astar_pairwise_aligner::main (2,751 samples, 89.35%)</title><rect x="10.6528%" y="565" width="89.3472%" height="15" fill="rgb(219,145,47)"/><text x="10.9028%" y="575.50">astar_pairwise_aligner::main</text></g><g><title>astar_pairwise_aligner::main::{{closure}} (2,372 samples, 77.04%)</title><rect x="22.9620%" y="549" width="77.0380%" height="15" fill="rgb(243,12,26)"/><text x="23.2120%" y="559.50">astar_pairwise_aligner::main::{{closure}}</text></g><g><title>astar_pairwise_aligner::runner::run (2,372 samples, 77.04%)</title><rect x="22.9620%" y="533" width="77.0380%" height="15" fill="rgb(214,87,16)"/><text x="23.2120%" y="543.50">astar_pairwise_aligner::runner::run</text></g><g><title>astar_pairwise_aligner::align::align_advanced (2,372 samples, 77.04%)</title><rect x="22.9620%" y="517" width="77.0380%" height="15" fill="rgb(208,99,42)"/><text x="23.2120%" y="527.50">astar_pairwise_aligner::align::align_advanced</text></g><g><title>core::ptr::drop_in_place&lt;astar_pairwise_aligner::heuristic::seed::SHI&gt; (4 samples, 0.13%)</title><rect x="99.8701%" y="501" width="0.1299%" height="15" fill="rgb(253,99,2)"/><text x="100.1201%" y="511.50"></text></g></svg></svg>