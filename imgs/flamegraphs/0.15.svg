<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (491 samples, 0.21%)</title><rect x="0.0100%" y="613" width="0.2133%" height="15" fill="rgb(227,0,7)"/><text x="0.2600%" y="623.50"></text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (400 samples, 0.17%)</title><rect x="0.2594%" y="613" width="0.1738%" height="15" fill="rgb(217,0,24)"/><text x="0.5094%" y="623.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (515 samples, 0.22%)</title><rect x="0.4366%" y="613" width="0.2238%" height="15" fill="rgb(221,193,54)"/><text x="0.6866%" y="623.50"></text></g><g><title>[[stack]] (1,528 samples, 0.66%)</title><rect x="0.0078%" y="629" width="0.6639%" height="15" fill="rgb(248,212,6)"/><text x="0.2578%" y="639.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (1,623 samples, 0.71%)</title><rect x="0.7160%" y="613" width="0.7052%" height="15" fill="rgb(208,68,35)"/><text x="0.9660%" y="623.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (1,601 samples, 0.70%)</title><rect x="1.4216%" y="613" width="0.6956%" height="15" fill="rgb(232,128,0)"/><text x="1.6716%" y="623.50"></text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (247 samples, 0.11%)</title><rect x="2.2445%" y="613" width="0.1073%" height="15" fill="rgb(207,160,47)"/><text x="2.4945%" y="623.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (268 samples, 0.12%)</title><rect x="2.4978%" y="613" width="0.1164%" height="15" fill="rgb(228,23,34)"/><text x="2.7478%" y="623.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (261 samples, 0.11%)</title><rect x="2.5008%" y="597" width="0.1134%" height="15" fill="rgb(218,30,26)"/><text x="2.7508%" y="607.50"></text></g><g><title>ropey::tree::node::Node::edit_chunk_at_char (261 samples, 0.11%)</title><rect x="2.5008%" y="581" width="0.1134%" height="15" fill="rgb(220,122,19)"/><text x="2.7508%" y="591.50"></text></g><g><title>[unknown] (4,476 samples, 1.94%)</title><rect x="0.7156%" y="629" width="1.9447%" height="15" fill="rgb(250,228,42)"/><text x="0.9656%" y="639.50">[..</text></g><g><title>ropey::tree::node::Node::remove_char_range (247 samples, 0.11%)</title><rect x="2.8515%" y="245" width="0.1073%" height="15" fill="rgb(240,193,28)"/><text x="3.1015%" y="255.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (278 samples, 0.12%)</title><rect x="2.8389%" y="261" width="0.1208%" height="15" fill="rgb(216,20,37)"/><text x="3.0889%" y="271.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (302 samples, 0.13%)</title><rect x="2.8328%" y="277" width="0.1312%" height="15" fill="rgb(206,188,39)"/><text x="3.0828%" y="287.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range::{{closure}} (326 samples, 0.14%)</title><rect x="2.8232%" y="293" width="0.1416%" height="15" fill="rgb(217,207,13)"/><text x="3.0732%" y="303.50"></text></g><g><title>ropey::tree::node::Node::remove_char_range (344 samples, 0.15%)</title><rect x="2.8167%" y="309" width="0.1495%" height="15" fill="rgb(231,73,38)"/><text x="3.0667%" y="319.50"></text></g><g><title>astar_pairwise_aligner::generate::generate_pair (702 samples, 0.31%)</title><rect x="2.6620%" y="357" width="0.3050%" height="15" fill="rgb(225,20,46)"/><text x="2.9120%" y="367.50"></text></g><g><title>ropey::rope::Rope::remove (378 samples, 0.16%)</title><rect x="2.8028%" y="341" width="0.1642%" height="15" fill="rgb(210,31,41)"/><text x="3.0528%" y="351.50"></text></g><g><title>ropey::rope::Rope::try_remove (377 samples, 0.16%)</title><rect x="2.8032%" y="325" width="0.1638%" height="15" fill="rgb(221,200,47)"/><text x="3.0532%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (245 samples, 0.11%)</title><rect x="2.9983%" y="165" width="0.1064%" height="15" fill="rgb(226,26,5)"/><text x="3.2483%" y="175.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::contains (364 samples, 0.16%)</title><rect x="2.9983%" y="181" width="0.1581%" height="15" fill="rgb(249,33,26)"/><text x="3.2483%" y="191.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value (468 samples, 0.20%)</title><rect x="2.9827%" y="245" width="0.2033%" height="15" fill="rgb(235,183,28)"/><text x="3.2327%" y="255.50"></text></g><g><title>astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt;::binary_search_by (468 samples, 0.20%)</title><rect x="2.9827%" y="229" width="0.2033%" height="15" fill="rgb(221,5,38)"/><text x="3.2327%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (464 samples, 0.20%)</title><rect x="2.9844%" y="213" width="0.2016%" height="15" fill="rgb(247,18,42)"/><text x="3.2344%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value::{{closure}} (432 samples, 0.19%)</title><rect x="2.9983%" y="197" width="0.1877%" height="15" fill="rgb(241,131,45)"/><text x="3.2483%" y="207.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::new (560 samples, 0.24%)</title><rect x="2.9679%" y="261" width="0.2433%" height="15" fill="rgb(249,31,29)"/><text x="3.2179%" y="271.50"></text></g><g><title>astar_pairwise_aligner::matches::mutations (245 samples, 0.11%)</title><rect x="3.3025%" y="229" width="0.1064%" height="15" fill="rgb(225,111,53)"/><text x="3.5525%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::push (385 samples, 0.17%)</title><rect x="3.4902%" y="229" width="0.1673%" height="15" fill="rgb(238,160,17)"/><text x="3.7402%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (876 samples, 0.38%)</title><rect x="3.6809%" y="149" width="0.3806%" height="15" fill="rgb(214,148,48)"/><text x="3.9309%" y="159.50"></text></g><g><title>core::ptr::write (876 samples, 0.38%)</title><rect x="3.6809%" y="133" width="0.3806%" height="15" fill="rgb(232,36,49)"/><text x="3.9309%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (880 samples, 0.38%)</title><rect x="3.6809%" y="165" width="0.3823%" height="15" fill="rgb(209,103,24)"/><text x="3.9309%" y="175.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1,028 samples, 0.45%)</title><rect x="3.6574%" y="229" width="0.4466%" height="15" fill="rgb(229,88,8)"/><text x="3.9074%" y="239.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1,028 samples, 0.45%)</title><rect x="3.6574%" y="213" width="0.4466%" height="15" fill="rgb(213,181,19)"/><text x="3.9074%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1,028 samples, 0.45%)</title><rect x="3.6574%" y="197" width="0.4466%" height="15" fill="rgb(254,191,54)"/><text x="3.9074%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1,012 samples, 0.44%)</title><rect x="3.6644%" y="181" width="0.4397%" height="15" fill="rgb(241,83,37)"/><text x="3.9144%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (370 samples, 0.16%)</title><rect x="4.1705%" y="165" width="0.1608%" height="15" fill="rgb(233,36,39)"/><text x="4.4205%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (370 samples, 0.16%)</title><rect x="4.1705%" y="149" width="0.1608%" height="15" fill="rgb(226,3,54)"/><text x="4.4205%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (370 samples, 0.16%)</title><rect x="4.1705%" y="133" width="0.1608%" height="15" fill="rgb(245,192,40)"/><text x="4.4205%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (542 samples, 0.24%)</title><rect x="4.1041%" y="229" width="0.2355%" height="15" fill="rgb(238,167,29)"/><text x="4.3541%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (542 samples, 0.24%)</title><rect x="4.1041%" y="213" width="0.2355%" height="15" fill="rgb(232,182,51)"/><text x="4.3541%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (521 samples, 0.23%)</title><rect x="4.1132%" y="197" width="0.2264%" height="15" fill="rgb(231,60,39)"/><text x="4.3632%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (521 samples, 0.23%)</title><rect x="4.1132%" y="181" width="0.2264%" height="15" fill="rgb(208,69,12)"/><text x="4.3632%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (717 samples, 0.31%)</title><rect x="4.5411%" y="133" width="0.3115%" height="15" fill="rgb(235,93,37)"/><text x="4.7911%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (717 samples, 0.31%)</title><rect x="4.5411%" y="117" width="0.3115%" height="15" fill="rgb(213,116,39)"/><text x="4.7911%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (717 samples, 0.31%)</title><rect x="4.5411%" y="101" width="0.3115%" height="15" fill="rgb(222,207,29)"/><text x="4.7911%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,240 samples, 0.54%)</title><rect x="4.3478%" y="181" width="0.5388%" height="15" fill="rgb(206,96,30)"/><text x="4.5978%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,240 samples, 0.54%)</title><rect x="4.3478%" y="165" width="0.5388%" height="15" fill="rgb(218,138,4)"/><text x="4.5978%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,240 samples, 0.54%)</title><rect x="4.3478%" y="149" width="0.5388%" height="15" fill="rgb(250,191,14)"/><text x="4.5978%" y="159.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,260 samples, 0.55%)</title><rect x="4.3396%" y="229" width="0.5474%" height="15" fill="rgb(239,60,40)"/><text x="4.5896%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,260 samples, 0.55%)</title><rect x="4.3396%" y="213" width="0.5474%" height="15" fill="rgb(206,27,48)"/><text x="4.5896%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,260 samples, 0.55%)</title><rect x="4.3396%" y="197" width="0.5474%" height="15" fill="rgb(225,35,8)"/><text x="4.5896%" y="207.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches (3,856 samples, 1.68%)</title><rect x="3.2125%" y="261" width="1.6753%" height="15" fill="rgb(250,213,24)"/><text x="3.4625%" y="271.50"></text></g><g><title>astar_pairwise_aligner::matches::ordered::find_matches_qgram_hash_inexact (3,856 samples, 1.68%)</title><rect x="3.2125%" y="245" width="1.6753%" height="15" fill="rgb(247,123,22)"/><text x="3.4625%" y="255.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSH&lt;C&gt; as astar_pairwise_aligner::heuristic::Heuristic&gt;::build (4,598 samples, 2.00%)</title><rect x="2.9679%" y="293" width="1.9977%" height="15" fill="rgb(231,138,38)"/><text x="3.2179%" y="303.50">&lt;..</text></g><g><title>astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt;::new (4,598 samples, 2.00%)</title><rect x="2.9679%" y="277" width="1.9977%" height="15" fill="rgb(231,145,46)"/><text x="3.2179%" y="287.50">a..</text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::contains::{{closure}} (2,843 samples, 1.24%)</title><rect x="13.8281%" y="213" width="1.2352%" height="15" fill="rgb(251,118,11)"/><text x="14.0781%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialOrd&gt;::le (2,843 samples, 1.24%)</title><rect x="13.8281%" y="197" width="1.2352%" height="15" fill="rgb(217,147,25)"/><text x="14.0781%" y="207.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (1,692 samples, 0.74%)</title><rect x="15.0633%" y="213" width="0.7351%" height="15" fill="rgb(247,81,37)"/><text x="15.3133%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (21,245 samples, 9.23%)</title><rect x="9.8074%" y="229" width="9.2305%" height="15" fill="rgb(209,12,38)"/><text x="10.0574%" y="239.50">&lt;core::slice:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,456 samples, 3.24%)</title><rect x="15.7984%" y="213" width="3.2395%" height="15" fill="rgb(227,1,9)"/><text x="16.0484%" y="223.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1,567 samples, 0.68%)</title><rect x="18.3571%" y="197" width="0.6808%" height="15" fill="rgb(248,47,43)"/><text x="18.6071%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1,567 samples, 0.68%)</title><rect x="18.3571%" y="181" width="0.6808%" height="15" fill="rgb(221,10,30)"/><text x="18.6071%" y="191.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::contains (22,327 samples, 9.70%)</title><rect x="9.8074%" y="245" width="9.7006%" height="15" fill="rgb(210,229,1)"/><text x="10.0574%" y="255.50">&lt;astar_pairwis..</text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (1,082 samples, 0.47%)</title><rect x="19.0379%" y="229" width="0.4701%" height="15" fill="rgb(222,148,37)"/><text x="19.2879%" y="239.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1,082 samples, 0.47%)</title><rect x="19.0379%" y="213" width="0.4701%" height="15" fill="rgb(234,67,33)"/><text x="19.2879%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (850 samples, 0.37%)</title><rect x="19.5119%" y="245" width="0.3693%" height="15" fill="rgb(247,98,35)"/><text x="19.7619%" y="255.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (664 samples, 0.29%)</title><rect x="19.9677%" y="229" width="0.2885%" height="15" fill="rgb(247,138,52)"/><text x="20.2177%" y="239.50"></text></g><g><title>&lt;astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt; as core::ops::index::Index&lt;u32&gt;&gt;::index (1,689 samples, 0.73%)</title><rect x="19.8812%" y="245" width="0.7338%" height="15" fill="rgb(213,79,30)"/><text x="20.1312%" y="255.50"></text></g><g><title>&lt;astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (826 samples, 0.36%)</title><rect x="20.2562%" y="229" width="0.3589%" height="15" fill="rgb(246,177,23)"/><text x="20.5062%" y="239.50"></text></g><g><title>astar_pairwise_aligner::datastructures::split_vec::SplitVec&lt;C&gt;::len (448 samples, 0.19%)</title><rect x="20.6150%" y="245" width="0.1946%" height="15" fill="rgb(230,62,27)"/><text x="20.8650%" y="255.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (756 samples, 0.33%)</title><rect x="20.8097%" y="213" width="0.3285%" height="15" fill="rgb(216,154,8)"/><text x="21.0597%" y="223.50"></text></g><g><title>core::cmp::min (1,028 samples, 0.45%)</title><rect x="20.8097%" y="245" width="0.4466%" height="15" fill="rgb(244,35,45)"/><text x="21.0597%" y="255.50"></text></g><g><title>core::cmp::Ord::min (1,028 samples, 0.45%)</title><rect x="20.8097%" y="229" width="0.4466%" height="15" fill="rgb(251,115,12)"/><text x="21.0597%" y="239.50"></text></g><g><title>core::cmp::min_by (272 samples, 0.12%)</title><rect x="21.1382%" y="213" width="0.1182%" height="15" fill="rgb(240,54,50)"/><text x="21.3882%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (340 samples, 0.15%)</title><rect x="21.2563%" y="229" width="0.1477%" height="15" fill="rgb(233,84,52)"/><text x="21.5063%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (250 samples, 0.11%)</title><rect x="21.5101%" y="213" width="0.1086%" height="15" fill="rgb(207,117,47)"/><text x="21.7601%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (987 samples, 0.43%)</title><rect x="21.2563%" y="245" width="0.4288%" height="15" fill="rgb(249,43,39)"/><text x="21.5063%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (647 samples, 0.28%)</title><rect x="21.4041%" y="229" width="0.2811%" height="15" fill="rgb(209,38,44)"/><text x="21.6541%" y="239.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (31,302 samples, 13.60%)</title><rect x="8.1847%" y="261" width="13.6000%" height="15" fill="rgb(236,212,23)"/><text x="8.4347%" y="271.50">&lt;astar_pairwise_align..</text></g><g><title>astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt;::transform (481 samples, 0.21%)</title><rect x="21.7847%" y="261" width="0.2090%" height="15" fill="rgb(242,79,21)"/><text x="22.0347%" y="271.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (33,140 samples, 14.40%)</title><rect x="8.0065%" y="277" width="14.3986%" height="15" fill="rgb(211,96,35)"/><text x="8.2565%" y="287.50">&lt;astar_pairwise_aligne..</text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::potential (947 samples, 0.41%)</title><rect x="21.9936%" y="261" width="0.4114%" height="15" fill="rgb(253,215,40)"/><text x="22.2436%" y="271.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (313 samples, 0.14%)</title><rect x="22.2691%" y="245" width="0.1360%" height="15" fill="rgb(211,81,21)"/><text x="22.5191%" y="255.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::is_seed_start_or_end (303 samples, 0.13%)</title><rect x="22.4051%" y="277" width="0.1316%" height="15" fill="rgb(208,190,38)"/><text x="22.6551%" y="287.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start_or_end (303 samples, 0.13%)</title><rect x="22.4051%" y="261" width="0.1316%" height="15" fill="rgb(235,213,38)"/><text x="22.6551%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (481 samples, 0.21%)</title><rect x="22.7644%" y="149" width="0.2090%" height="15" fill="rgb(237,122,38)"/><text x="23.0144%" y="159.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::contains (504 samples, 0.22%)</title><rect x="22.7644%" y="165" width="0.2190%" height="15" fill="rgb(244,218,35)"/><text x="23.0144%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max (316 samples, 0.14%)</title><rect x="23.0077%" y="165" width="0.1373%" height="15" fill="rgb(240,68,47)"/><text x="23.2577%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (316 samples, 0.14%)</title><rect x="23.0077%" y="149" width="0.1373%" height="15" fill="rgb(210,16,53)"/><text x="23.2577%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (316 samples, 0.14%)</title><rect x="23.0077%" y="133" width="0.1373%" height="15" fill="rgb(235,124,12)"/><text x="23.2577%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (310 samples, 0.13%)</title><rect x="23.0103%" y="117" width="0.1347%" height="15" fill="rgb(224,169,11)"/><text x="23.2603%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (308 samples, 0.13%)</title><rect x="23.0112%" y="101" width="0.1338%" height="15" fill="rgb(250,166,2)"/><text x="23.2612%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (308 samples, 0.13%)</title><rect x="23.0112%" y="85" width="0.1338%" height="15" fill="rgb(242,216,29)"/><text x="23.2612%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (294 samples, 0.13%)</title><rect x="23.1737%" y="69" width="0.1277%" height="15" fill="rgb(230,116,27)"/><text x="23.4237%" y="79.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (294 samples, 0.13%)</title><rect x="23.1737%" y="53" width="0.1277%" height="15" fill="rgb(228,99,48)"/><text x="23.4237%" y="63.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (285 samples, 0.12%)</title><rect x="23.1776%" y="37" width="0.1238%" height="15" fill="rgb(253,11,6)"/><text x="23.4276%" y="47.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (294 samples, 0.13%)</title><rect x="23.3027%" y="69" width="0.1277%" height="15" fill="rgb(247,143,39)"/><text x="23.5527%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (294 samples, 0.13%)</title><rect x="23.3027%" y="53" width="0.1277%" height="15" fill="rgb(236,97,10)"/><text x="23.5527%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (294 samples, 0.13%)</title><rect x="23.3027%" y="37" width="0.1277%" height="15" fill="rgb(233,208,19)"/><text x="23.5527%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (660 samples, 0.29%)</title><rect x="23.1546%" y="117" width="0.2868%" height="15" fill="rgb(216,164,2)"/><text x="23.4046%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (660 samples, 0.29%)</title><rect x="23.1546%" y="101" width="0.2868%" height="15" fill="rgb(220,129,5)"/><text x="23.4046%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (660 samples, 0.29%)</title><rect x="23.1546%" y="85" width="0.2868%" height="15" fill="rgb(242,17,10)"/><text x="23.4046%" y="95.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::prune_with_hint::{{closure}} (1,645 samples, 0.71%)</title><rect x="22.7275%" y="181" width="0.7147%" height="15" fill="rgb(242,107,0)"/><text x="22.9775%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (677 samples, 0.29%)</title><rect x="23.1480%" y="165" width="0.2941%" height="15" fill="rgb(251,28,31)"/><text x="23.3980%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (677 samples, 0.29%)</title><rect x="23.1480%" y="149" width="0.2941%" height="15" fill="rgb(233,223,10)"/><text x="23.3980%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (677 samples, 0.29%)</title><rect x="23.1480%" y="133" width="0.2941%" height="15" fill="rgb(215,21,27)"/><text x="23.3980%" y="143.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::prune_with_hint::{{closure}} (2,134 samples, 0.93%)</title><rect x="22.5867%" y="197" width="0.9272%" height="15" fill="rgb(232,23,21)"/><text x="22.8367%" y="207.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::prune_filter::{{closure}} (2,151 samples, 0.93%)</title><rect x="22.5854%" y="213" width="0.9346%" height="15" fill="rgb(244,5,23)"/><text x="22.8354%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::prune_filter (2,214 samples, 0.96%)</title><rect x="22.5650%" y="245" width="0.9619%" height="15" fill="rgb(226,81,46)"/><text x="22.8150%" y="255.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::retain (2,213 samples, 0.96%)</title><rect x="22.5654%" y="229" width="0.9615%" height="15" fill="rgb(247,70,30)"/><text x="22.8154%" y="239.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::prune_with_hint (2,373 samples, 1.03%)</title><rect x="22.5519%" y="261" width="1.0310%" height="15" fill="rgb(212,68,19)"/><text x="22.8019%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (617 samples, 0.27%)</title><rect x="23.6251%" y="165" width="0.2681%" height="15" fill="rgb(240,187,13)"/><text x="23.8751%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (617 samples, 0.27%)</title><rect x="23.6251%" y="149" width="0.2681%" height="15" fill="rgb(223,113,26)"/><text x="23.8751%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (617 samples, 0.27%)</title><rect x="23.6251%" y="133" width="0.2681%" height="15" fill="rgb(206,192,2)"/><text x="23.8751%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (704 samples, 0.31%)</title><rect x="23.5938%" y="213" width="0.3059%" height="15" fill="rgb(241,108,4)"/><text x="23.8438%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (704 samples, 0.31%)</title><rect x="23.5938%" y="197" width="0.3059%" height="15" fill="rgb(247,173,49)"/><text x="23.8438%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (704 samples, 0.31%)</title><rect x="23.5938%" y="181" width="0.3059%" height="15" fill="rgb(224,114,35)"/><text x="23.8438%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (709 samples, 0.31%)</title><rect x="23.5921%" y="261" width="0.3080%" height="15" fill="rgb(245,159,27)"/><text x="23.8421%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (709 samples, 0.31%)</title><rect x="23.5921%" y="245" width="0.3080%" height="15" fill="rgb(245,172,44)"/><text x="23.8421%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (709 samples, 0.31%)</title><rect x="23.5921%" y="229" width="0.3080%" height="15" fill="rgb(236,23,11)"/><text x="23.8421%" y="239.50"></text></g><g><title>std::time::Instant::elapsed (255 samples, 0.11%)</title><rect x="23.9014%" y="261" width="0.1108%" height="15" fill="rgb(205,117,38)"/><text x="24.1514%" y="271.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::prune (3,619 samples, 1.57%)</title><rect x="22.5367%" y="277" width="1.5724%" height="15" fill="rgb(237,72,25)"/><text x="22.7867%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1,116 samples, 0.48%)</title><rect x="25.2305%" y="197" width="0.4849%" height="15" fill="rgb(244,70,9)"/><text x="25.4805%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (403 samples, 0.18%)</title><rect x="25.5403%" y="181" width="0.1751%" height="15" fill="rgb(217,125,39)"/><text x="25.7903%" y="191.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::bruteforce::BruteForceContour as astar_pairwise_aligner::contour::Contour&gt;::contains (1,207 samples, 0.52%)</title><rect x="25.2305%" y="213" width="0.5244%" height="15" fill="rgb(235,36,10)"/><text x="25.4805%" y="223.50"></text></g><g><title>&lt;astar_pairwise_aligner::contour::hint_contours::HintContours&lt;C&gt; as astar_pairwise_aligner::contour::Contours&gt;::value_with_hint (1,903 samples, 0.83%)</title><rect x="25.1266%" y="229" width="0.8268%" height="15" fill="rgb(251,123,47)"/><text x="25.3766%" y="239.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::h_with_hint (2,079 samples, 0.90%)</title><rect x="25.1088%" y="245" width="0.9033%" height="15" fill="rgb(221,13,13)"/><text x="25.3588%" y="255.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::seed_at (318 samples, 0.14%)</title><rect x="26.0903%" y="197" width="0.1382%" height="15" fill="rgb(238,131,9)"/><text x="26.3403%" y="207.50"></text></g><g><title>&lt;astar_pairwise_aligner::heuristic::chained_seed::CSHI&lt;C&gt; as astar_pairwise_aligner::heuristic::HeuristicInstance&gt;::is_seed_start_or_end (668 samples, 0.29%)</title><rect x="26.0121%" y="245" width="0.2902%" height="15" fill="rgb(211,50,8)"/><text x="26.2621%" y="255.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start_or_end (668 samples, 0.29%)</title><rect x="26.0121%" y="229" width="0.2902%" height="15" fill="rgb(245,182,24)"/><text x="26.2621%" y="239.50"></text></g><g><title>astar_pairwise_aligner::matches::SeedMatches::is_seed_start (493 samples, 0.21%)</title><rect x="26.0881%" y="213" width="0.2142%" height="15" fill="rgb(242,14,37)"/><text x="26.3381%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (494 samples, 0.21%)</title><rect x="26.3740%" y="165" width="0.2146%" height="15" fill="rgb(246,228,12)"/><text x="26.6240%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (494 samples, 0.21%)</title><rect x="26.3740%" y="149" width="0.2146%" height="15" fill="rgb(213,55,15)"/><text x="26.6240%" y="159.50"></text></g><g><title>core::ptr::write (494 samples, 0.21%)</title><rect x="26.3740%" y="133" width="0.2146%" height="15" fill="rgb(209,9,3)"/><text x="26.6240%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (325 samples, 0.14%)</title><rect x="26.6021%" y="149" width="0.1412%" height="15" fill="rgb(230,59,30)"/><text x="26.8521%" y="159.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1,135 samples, 0.49%)</title><rect x="26.3023%" y="229" width="0.4931%" height="15" fill="rgb(209,121,21)"/><text x="26.5523%" y="239.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1,135 samples, 0.49%)</title><rect x="26.3023%" y="213" width="0.4931%" height="15" fill="rgb(220,109,13)"/><text x="26.5523%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1,135 samples, 0.49%)</title><rect x="26.3023%" y="197" width="0.4931%" height="15" fill="rgb(232,18,1)"/><text x="26.5523%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1,051 samples, 0.46%)</title><rect x="26.3388%" y="181" width="0.4566%" height="15" fill="rgb(215,41,42)"/><text x="26.5888%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (449 samples, 0.20%)</title><rect x="26.6004%" y="165" width="0.1951%" height="15" fill="rgb(224,123,36)"/><text x="26.8504%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (338 samples, 0.15%)</title><rect x="28.0146%" y="85" width="0.1469%" height="15" fill="rgb(240,125,3)"/><text x="28.2646%" y="95.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (239 samples, 0.10%)</title><rect x="28.1615%" y="85" width="0.1038%" height="15" fill="rgb(205,98,50)"/><text x="28.4115%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (239 samples, 0.10%)</title><rect x="28.1615%" y="69" width="0.1038%" height="15" fill="rgb(205,185,37)"/><text x="28.4115%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (239 samples, 0.10%)</title><rect x="28.1615%" y="53" width="0.1038%" height="15" fill="rgb(238,207,15)"/><text x="28.4115%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (959 samples, 0.42%)</title><rect x="27.8956%" y="101" width="0.4167%" height="15" fill="rgb(213,199,42)"/><text x="28.1456%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1,061 samples, 0.46%)</title><rect x="27.8956%" y="117" width="0.4610%" height="15" fill="rgb(235,201,11)"/><text x="28.1456%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,911 samples, 0.83%)</title><rect x="27.5467%" y="197" width="0.8303%" height="15" fill="rgb(207,46,11)"/><text x="27.7967%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,911 samples, 0.83%)</title><rect x="27.5467%" y="181" width="0.8303%" height="15" fill="rgb(241,35,35)"/><text x="27.7967%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,722 samples, 0.75%)</title><rect x="27.6288%" y="165" width="0.7482%" height="15" fill="rgb(243,32,47)"/><text x="27.8788%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,722 samples, 0.75%)</title><rect x="27.6288%" y="149" width="0.7482%" height="15" fill="rgb(247,202,23)"/><text x="27.8788%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1,667 samples, 0.72%)</title><rect x="27.6527%" y="133" width="0.7243%" height="15" fill="rgb(219,102,11)"/><text x="27.9027%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (404 samples, 0.18%)</title><rect x="28.8792%" y="165" width="0.1755%" height="15" fill="rgb(243,110,44)"/><text x="29.1292%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (395 samples, 0.17%)</title><rect x="28.8831%" y="149" width="0.1716%" height="15" fill="rgb(222,74,54)"/><text x="29.1331%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1,952 samples, 0.85%)</title><rect x="29.0973%" y="165" width="0.8481%" height="15" fill="rgb(216,99,12)"/><text x="29.3473%" y="175.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (1,853 samples, 0.81%)</title><rect x="29.1403%" y="149" width="0.8051%" height="15" fill="rgb(226,22,26)"/><text x="29.3903%" y="159.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (1,853 samples, 0.81%)</title><rect x="29.1403%" y="133" width="0.8051%" height="15" fill="rgb(217,163,10)"/><text x="29.3903%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (258 samples, 0.11%)</title><rect x="29.9454%" y="165" width="0.1121%" height="15" fill="rgb(213,25,53)"/><text x="30.1954%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6,941 samples, 3.02%)</title><rect x="30.0836%" y="165" width="3.0157%" height="15" fill="rgb(252,105,26)"/><text x="30.3336%" y="175.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6,941 samples, 3.02%)</title><rect x="30.0836%" y="149" width="3.0157%" height="15" fill="rgb(220,39,43)"/><text x="30.3336%" y="159.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6,941 samples, 3.02%)</title><rect x="30.0836%" y="133" width="3.0157%" height="15" fill="rgb(229,68,48)"/><text x="30.3336%" y="143.50">cor..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (411 samples, 0.18%)</title><rect x="33.0993%" y="165" width="0.1786%" height="15" fill="rgb(252,8,32)"/><text x="33.3493%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (411 samples, 0.18%)</title><rect x="33.0993%" y="149" width="0.1786%" height="15" fill="rgb(223,20,43)"/><text x="33.3493%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (567 samples, 0.25%)</title><rect x="33.2779%" y="165" width="0.2463%" height="15" fill="rgb(229,81,49)"/><text x="33.5279%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (567 samples, 0.25%)</title><rect x="33.2779%" y="149" width="0.2463%" height="15" fill="rgb(236,28,36)"/><text x="33.5279%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (567 samples, 0.25%)</title><rect x="33.2779%" y="133" width="0.2463%" height="15" fill="rgb(249,185,26)"/><text x="33.5279%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15,437 samples, 6.71%)</title><rect x="26.8246%" y="213" width="6.7070%" height="15" fill="rgb(249,174,33)"/><text x="27.0746%" y="223.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11,725 samples, 5.09%)</title><rect x="28.4374%" y="197" width="5.0942%" height="15" fill="rgb(233,201,37)"/><text x="28.6874%" y="207.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11,725 samples, 5.09%)</title><rect x="28.4374%" y="181" width="5.0942%" height="15" fill="rgb(221,78,26)"/><text x="28.6874%" y="191.50">hashbr..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as astar_pairwise_aligner::datastructures::diagonal_map::DiagonalMapTrait&lt;astar_pairwise_aligner::alignment_graph::Pos,V&gt;&gt;::get_mut (17,345 samples, 7.54%)</title><rect x="26.3023%" y="245" width="7.5360%" height="15" fill="rgb(250,127,30)"/><text x="26.5523%" y="255.50">&lt;std::coll..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (16,210 samples, 7.04%)</title><rect x="26.7955%" y="229" width="7.0429%" height="15" fill="rgb(230,49,44)"/><text x="27.0455%" y="239.50">std::coll..</text></g><g><title>std::collections::hash::map::map_entry (706 samples, 0.31%)</title><rect x="33.5316%" y="213" width="0.3067%" height="15" fill="rgb(229,67,23)"/><text x="33.7816%" y="223.50"></text></g><g><title>astar_pairwise_aligner::alignment_graph::EditGraph::is_match (400 samples, 0.17%)</title><rect x="33.8535%" y="245" width="0.1738%" height="15" fill="rgb(249,83,47)"/><text x="34.1035%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (469 samples, 0.20%)</title><rect x="34.1542%" y="229" width="0.2038%" height="15" fill="rgb(215,43,3)"/><text x="34.4042%" y="239.50"></text></g><g><title>astar_pairwise_aligner::alignment_graph::EditGraph::iterate_outgoing_edges (23,646 samples, 10.27%)</title><rect x="24.1091%" y="277" width="10.2736%" height="15" fill="rgb(238,154,13)"/><text x="24.3591%" y="287.50">astar_pairwise_..</text></g><g><title>astar_pairwise_aligner::astar::astar::{{closure}} (23,005 samples, 10.00%)</title><rect x="24.3876%" y="261" width="9.9951%" height="15" fill="rgb(219,56,2)"/><text x="24.6376%" y="271.50">astar_pairwise..</text></g><g><title>astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;T&gt;::push (589 samples, 0.26%)</title><rect x="34.1268%" y="245" width="0.2559%" height="15" fill="rgb(233,0,4)"/><text x="34.3768%" y="255.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (366 samples, 0.16%)</title><rect x="34.3827%" y="277" width="0.1590%" height="15" fill="rgb(235,30,7)"/><text x="34.6327%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (482 samples, 0.21%)</title><rect x="34.6769%" y="117" width="0.2094%" height="15" fill="rgb(250,79,13)"/><text x="34.9269%" y="127.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (482 samples, 0.21%)</title><rect x="34.6769%" y="101" width="0.2094%" height="15" fill="rgb(211,146,34)"/><text x="34.9269%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (492 samples, 0.21%)</title><rect x="34.6769%" y="133" width="0.2138%" height="15" fill="rgb(228,22,38)"/><text x="34.9269%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (335 samples, 0.15%)</title><rect x="34.8959%" y="133" width="0.1455%" height="15" fill="rgb(235,168,5)"/><text x="35.1459%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (335 samples, 0.15%)</title><rect x="34.8959%" y="117" width="0.1455%" height="15" fill="rgb(221,155,16)"/><text x="35.1459%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (335 samples, 0.15%)</title><rect x="34.8959%" y="101" width="0.1455%" height="15" fill="rgb(215,215,53)"/><text x="35.1459%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt; as astar_pairwise_aligner::datastructures::diagonal_map::DiagonalMapTrait&lt;astar_pairwise_aligner::alignment_graph::Pos,V&gt;&gt;::get (1,122 samples, 0.49%)</title><rect x="34.5809%" y="245" width="0.4875%" height="15" fill="rgb(223,4,10)"/><text x="34.8309%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,122 samples, 0.49%)</title><rect x="34.5809%" y="229" width="0.4875%" height="15" fill="rgb(234,103,6)"/><text x="34.8309%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,122 samples, 0.49%)</title><rect x="34.5809%" y="213" width="0.4875%" height="15" fill="rgb(227,97,0)"/><text x="34.8309%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,122 samples, 0.49%)</title><rect x="34.5809%" y="197" width="0.4875%" height="15" fill="rgb(234,150,53)"/><text x="34.8309%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,090 samples, 0.47%)</title><rect x="34.5948%" y="181" width="0.4736%" height="15" fill="rgb(228,201,54)"/><text x="34.8448%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,090 samples, 0.47%)</title><rect x="34.5948%" y="165" width="0.4736%" height="15" fill="rgb(222,22,37)"/><text x="34.8448%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,090 samples, 0.47%)</title><rect x="34.5948%" y="149" width="0.4736%" height="15" fill="rgb(237,53,32)"/><text x="34.8448%" y="159.50"></text></g><g><title>astar_pairwise_aligner::astar::parent (1,197 samples, 0.52%)</title><rect x="34.5604%" y="261" width="0.5201%" height="15" fill="rgb(233,25,53)"/><text x="34.8104%" y="271.50"></text></g><g><title>astar_pairwise_aligner::astar::traceback (1,255 samples, 0.55%)</title><rect x="34.5418%" y="277" width="0.5453%" height="15" fill="rgb(210,40,34)"/><text x="34.7918%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,335 samples, 0.58%)</title><rect x="35.6831%" y="261" width="0.5800%" height="15" fill="rgb(241,220,44)"/><text x="35.9331%" y="271.50"></text></g><g><title>astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;T&gt;::pop (2,801 samples, 1.22%)</title><rect x="35.0870%" y="277" width="1.2170%" height="15" fill="rgb(235,28,35)"/><text x="35.3370%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (380 samples, 0.17%)</title><rect x="36.5977%" y="261" width="0.1651%" height="15" fill="rgb(210,56,17)"/><text x="36.8477%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (380 samples, 0.17%)</title><rect x="36.5977%" y="245" width="0.1651%" height="15" fill="rgb(224,130,29)"/><text x="36.8477%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (380 samples, 0.17%)</title><rect x="36.5977%" y="229" width="0.1651%" height="15" fill="rgb(235,212,8)"/><text x="36.8477%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,144 samples, 0.93%)</title><rect x="37.0556%" y="197" width="0.9315%" height="15" fill="rgb(223,33,50)"/><text x="37.3056%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,144 samples, 0.93%)</title><rect x="37.0556%" y="181" width="0.9315%" height="15" fill="rgb(219,149,13)"/><text x="37.3056%" y="191.50"></text></g><g><title>alloc::alloc::realloc (2,144 samples, 0.93%)</title><rect x="37.0556%" y="165" width="0.9315%" height="15" fill="rgb(250,156,29)"/><text x="37.3056%" y="175.50"></text></g><g><title>__rdl_realloc (2,144 samples, 0.93%)</title><rect x="37.0556%" y="149" width="0.9315%" height="15" fill="rgb(216,193,19)"/><text x="37.3056%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2,144 samples, 0.93%)</title><rect x="37.0556%" y="133" width="0.9315%" height="15" fill="rgb(216,135,14)"/><text x="37.3056%" y="143.50"></text></g><g><title>realloc (2,143 samples, 0.93%)</title><rect x="37.0561%" y="117" width="0.9311%" height="15" fill="rgb(241,47,5)"/><text x="37.3061%" y="127.50"></text></g><g><title>[libc.so.6] (2,049 samples, 0.89%)</title><rect x="37.0969%" y="101" width="0.8902%" height="15" fill="rgb(233,42,35)"/><text x="37.3469%" y="111.50"></text></g><g><title>[libc.so.6] (1,927 samples, 0.84%)</title><rect x="37.1499%" y="85" width="0.8372%" height="15" fill="rgb(231,13,6)"/><text x="37.3999%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,164 samples, 0.94%)</title><rect x="37.0539%" y="213" width="0.9402%" height="15" fill="rgb(207,181,40)"/><text x="37.3039%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,199 samples, 0.96%)</title><rect x="37.0439%" y="245" width="0.9554%" height="15" fill="rgb(254,173,49)"/><text x="37.2939%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,199 samples, 0.96%)</title><rect x="37.0439%" y="229" width="0.9554%" height="15" fill="rgb(221,1,38)"/><text x="37.2939%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (330 samples, 0.14%)</title><rect x="37.9993%" y="245" width="0.1434%" height="15" fill="rgb(206,124,46)"/><text x="38.2493%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,004 samples, 2.17%)</title><rect x="36.7628%" y="261" width="2.1741%" height="15" fill="rgb(249,21,11)"/><text x="37.0128%" y="271.50">a..</text></g><g><title>core::ptr::write (1,828 samples, 0.79%)</title><rect x="38.1427%" y="245" width="0.7942%" height="15" fill="rgb(222,201,40)"/><text x="38.3927%" y="255.50"></text></g><g><title>astar_pairwise_aligner::datastructures::bucket_queue::BucketQueue&lt;T&gt;::push (6,122 samples, 2.66%)</title><rect x="36.3040%" y="277" width="2.6599%" height="15" fill="rgb(235,61,29)"/><text x="36.5540%" y="287.50">as..</text></g><g><title>astar_pairwise_aligner::astar::astar (452 samples, 0.20%)</title><rect x="38.9639%" y="245" width="0.1964%" height="15" fill="rgb(219,207,3)"/><text x="39.2139%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (690 samples, 0.30%)</title><rect x="39.1620%" y="213" width="0.2998%" height="15" fill="rgb(222,56,46)"/><text x="39.4120%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (690 samples, 0.30%)</title><rect x="39.1620%" y="197" width="0.2998%" height="15" fill="rgb(239,76,54)"/><text x="39.4120%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (690 samples, 0.30%)</title><rect x="39.1620%" y="181" width="0.2998%" height="15" fill="rgb(231,124,27)"/><text x="39.4120%" y="191.50"></text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::hash::Hash&gt;::hash (690 samples, 0.30%)</title><rect x="39.1620%" y="165" width="0.2998%" height="15" fill="rgb(249,195,6)"/><text x="39.4120%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (690 samples, 0.30%)</title><rect x="39.1620%" y="149" width="0.2998%" height="15" fill="rgb(237,174,47)"/><text x="39.4120%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (690 samples, 0.30%)</title><rect x="39.1620%" y="133" width="0.2998%" height="15" fill="rgb(206,201,31)"/><text x="39.4120%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (690 samples, 0.30%)</title><rect x="39.1620%" y="117" width="0.2998%" height="15" fill="rgb(231,57,52)"/><text x="39.4120%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (525 samples, 0.23%)</title><rect x="39.2337%" y="101" width="0.2281%" height="15" fill="rgb(248,177,22)"/><text x="39.4837%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,645 samples, 0.71%)</title><rect x="41.1901%" y="165" width="0.7147%" height="15" fill="rgb(215,211,37)"/><text x="41.4401%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,642 samples, 0.71%)</title><rect x="41.1914%" y="149" width="0.7134%" height="15" fill="rgb(241,128,51)"/><text x="41.4414%" y="159.50"></text></g><g><title>astar_pairwise_aligner::astar::astar (823 samples, 0.36%)</title><rect x="41.9048%" y="165" width="0.3576%" height="15" fill="rgb(227,165,31)"/><text x="42.1548%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (65,256 samples, 28.35%)</title><rect x="42.2959%" y="149" width="28.3522%" height="15" fill="rgb(228,167,24)"/><text x="42.5459%" y="159.50">hashbrown::map::equivalent_key::{{closure}}</text></g><g><title>&lt;astar_pairwise_aligner::alignment_graph::Pos as core::cmp::PartialEq&gt;::eq (65,256 samples, 28.35%)</title><rect x="42.2959%" y="133" width="28.3522%" height="15" fill="rgb(228,143,12)"/><text x="42.5459%" y="143.50">&lt;astar_pairwise_aligner::alignment_graph::Pos ..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (363 samples, 0.16%)</title><rect x="70.6481%" y="117" width="0.1577%" height="15" fill="rgb(249,149,8)"/><text x="70.8981%" y="127.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (363 samples, 0.16%)</title><rect x="70.6481%" y="101" width="0.1577%" height="15" fill="rgb(243,35,44)"/><text x="70.8981%" y="111.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (363 samples, 0.16%)</title><rect x="70.6481%" y="85" width="0.1577%" height="15" fill="rgb(246,89,9)"/><text x="70.8981%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (65,971 samples, 28.66%)</title><rect x="42.2959%" y="165" width="28.6629%" height="15" fill="rgb(233,213,13)"/><text x="42.5459%" y="175.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (715 samples, 0.31%)</title><rect x="70.6481%" y="149" width="0.3107%" height="15" fill="rgb(233,141,41)"/><text x="70.8981%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (715 samples, 0.31%)</title><rect x="70.6481%" y="133" width="0.3107%" height="15" fill="rgb(239,167,4)"/><text x="70.8981%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (352 samples, 0.15%)</title><rect x="70.8058%" y="117" width="0.1529%" height="15" fill="rgb(209,217,16)"/><text x="71.0558%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (464 samples, 0.20%)</title><rect x="70.9587%" y="165" width="0.2016%" height="15" fill="rgb(219,88,35)"/><text x="71.2087%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (63,088 samples, 27.41%)</title><rect x="71.2442%" y="165" width="27.4103%" height="15" fill="rgb(220,193,23)"/><text x="71.4942%" y="175.50">hashbrown::raw::sse2::Group::load</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (63,088 samples, 27.41%)</title><rect x="71.2442%" y="149" width="27.4103%" height="15" fill="rgb(230,90,52)"/><text x="71.4942%" y="159.50">core::core_arch::x86::sse2::_mm_loadu_si128</text></g><g><title>core::intrinsics::copy_nonoverlapping (63,088 samples, 27.41%)</title><rect x="71.2442%" y="133" width="27.4103%" height="15" fill="rgb(252,106,19)"/><text x="71.4942%" y="143.50">core::intrinsics::copy_nonoverlapping</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,091 samples, 0.91%)</title><rect x="98.6544%" y="165" width="0.9085%" height="15" fill="rgb(206,74,20)"/><text x="98.9044%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,091 samples, 0.91%)</title><rect x="98.6544%" y="149" width="0.9085%" height="15" fill="rgb(230,138,44)"/><text x="98.9044%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (138,996 samples, 60.39%)</title><rect x="39.4618%" y="213" width="60.3905%" height="15" fill="rgb(235,182,43)"/><text x="39.7118%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::get_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (138,996 samples, 60.39%)</title><rect x="39.4618%" y="197" width="60.3905%" height="15" fill="rgb(242,16,51)"/><text x="39.7118%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (138,996 samples, 60.39%)</title><rect x="39.4618%" y="181" width="60.3905%" height="15" fill="rgb(248,9,4)"/><text x="39.7118%" y="191.50">hashbrown::raw::RawTableInner&lt;A&gt;::find_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (666 samples, 0.29%)</title><rect x="99.5629%" y="165" width="0.2894%" height="15" fill="rgb(210,31,22)"/><text x="99.8129%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (666 samples, 0.29%)</title><rect x="99.5629%" y="149" width="0.2894%" height="15" fill="rgb(239,54,39)"/><text x="99.8129%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (666 samples, 0.29%)</title><rect x="99.5629%" y="133" width="0.2894%" height="15" fill="rgb(230,99,41)"/><text x="99.8129%" y="143.50"></text></g><g><title>astar_pairwise_aligner::datastructures::diagonal_map::&lt;impl core::ops::index::IndexMut&lt;astar_pairwise_aligner::alignment_graph::Pos&gt; for std::collections::hash::map::HashMap&lt;astar_pairwise_aligner::alignment_graph::Pos,V,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt;::index_mut (140,347 samples, 60.98%)</title><rect x="38.9639%" y="277" width="60.9775%" height="15" fill="rgb(253,106,12)"/><text x="39.2139%" y="287.50">astar_pairwise_aligner::datastructures::diagonal_map::&lt;impl core::ops::index::IndexMut&lt;astar_pairwise..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (140,347 samples, 60.98%)</title><rect x="38.9639%" y="261" width="60.9775%" height="15" fill="rgb(213,46,41)"/><text x="39.2139%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (139,895 samples, 60.78%)</title><rect x="39.1602%" y="245" width="60.7811%" height="15" fill="rgb(215,133,35)"/><text x="39.4102%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (139,895 samples, 60.78%)</title><rect x="39.1602%" y="229" width="60.7811%" height="15" fill="rgb(213,28,5)"/><text x="39.4102%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>astar_pairwise_aligner::astar::astar (218,600 samples, 94.98%)</title><rect x="4.9678%" y="293" width="94.9766%" height="15" fill="rgb(215,77,49)"/><text x="5.2178%" y="303.50">astar_pairwise_aligner::astar::astar</text></g><g><title>_start (224,031 samples, 97.34%)</title><rect x="2.6620%" y="629" width="97.3362%" height="15" fill="rgb(248,100,22)"/><text x="2.9120%" y="639.50">_start</text></g><g><title>__libc_start_main (224,031 samples, 97.34%)</title><rect x="2.6620%" y="613" width="97.3362%" height="15" fill="rgb(208,67,9)"/><text x="2.9120%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (224,031 samples, 97.34%)</title><rect x="2.6620%" y="597" width="97.3362%" height="15" fill="rgb(219,133,21)"/><text x="2.9120%" y="607.50">[libc.so.6]</text></g><g><title>main (224,031 samples, 97.34%)</title><rect x="2.6620%" y="581" width="97.3362%" height="15" fill="rgb(246,46,29)"/><text x="2.9120%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (224,031 samples, 97.34%)</title><rect x="2.6620%" y="565" width="97.3362%" height="15" fill="rgb(246,185,52)"/><text x="2.9120%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (224,031 samples, 97.34%)</title><rect x="2.6620%" y="549" width="97.3362%" height="15" fill="rgb(252,136,11)"/><text x="2.9120%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (224,031 samples, 97.34%)</title><rect x="2.6620%" y="533" width="97.3362%" height="15" fill="rgb(219,138,53)"/><text x="2.9120%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (224,031 samples, 97.34%)</title><rect x="2.6620%" y="517" width="97.3362%" height="15" fill="rgb(211,51,23)"/><text x="2.9120%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (224,031 samples, 97.34%)</title><rect x="2.6620%" y="501" width="97.3362%" height="15" fill="rgb(247,221,28)"/><text x="2.9120%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (224,031 samples, 97.34%)</title><rect x="2.6620%" y="485" width="97.3362%" height="15" fill="rgb(251,222,45)"/><text x="2.9120%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (224,031 samples, 97.34%)</title><rect x="2.6620%" y="469" width="97.3362%" height="15" fill="rgb(217,162,53)"/><text x="2.9120%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (224,031 samples, 97.34%)</title><rect x="2.6620%" y="453" width="97.3362%" height="15" fill="rgb(229,93,14)"/><text x="2.9120%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (224,031 samples, 97.34%)</title><rect x="2.6620%" y="437" width="97.3362%" height="15" fill="rgb(209,67,49)"/><text x="2.9120%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (224,031 samples, 97.34%)</title><rect x="2.6620%" y="421" width="97.3362%" height="15" fill="rgb(213,87,29)"/><text x="2.9120%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (224,031 samples, 97.34%)</title><rect x="2.6620%" y="405" width="97.3362%" height="15" fill="rgb(205,151,52)"/><text x="2.9120%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (224,031 samples, 97.34%)</title><rect x="2.6620%" y="389" width="97.3362%" height="15" fill="rgb(253,215,39)"/><text x="2.9120%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>astar_pairwise_aligner::main (224,031 samples, 97.34%)</title><rect x="2.6620%" y="373" width="97.3362%" height="15" fill="rgb(221,220,41)"/><text x="2.9120%" y="383.50">astar_pairwise_aligner::main</text></g><g><title>astar_pairwise_aligner::main::{{closure}} (223,329 samples, 97.03%)</title><rect x="2.9670%" y="357" width="97.0312%" height="15" fill="rgb(218,133,21)"/><text x="3.2170%" y="367.50">astar_pairwise_aligner::main::{{closure}}</text></g><g><title>astar_pairwise_aligner::runner::run (223,327 samples, 97.03%)</title><rect x="2.9679%" y="341" width="97.0304%" height="15" fill="rgb(221,193,43)"/><text x="3.2179%" y="351.50">astar_pairwise_aligner::runner::run</text></g><g><title>astar_pairwise_aligner::runner::run::run_contours (223,327 samples, 97.03%)</title><rect x="2.9679%" y="325" width="97.0304%" height="15" fill="rgb(240,128,52)"/><text x="3.2179%" y="335.50">astar_pairwise_aligner::runner::run::run_contours</text></g><g><title>astar_pairwise_aligner::align::align_advanced (223,327 samples, 97.03%)</title><rect x="2.9679%" y="309" width="97.0304%" height="15" fill="rgb(253,114,12)"/><text x="3.2179%" y="319.50">astar_pairwise_aligner::align::align_advanced</text></g><g><title>all (230,162 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(215,223,47)"/><text x="0.2500%" y="671.50"></text></g><g><title>astar-pairwise- (230,162 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(248,225,23)"/><text x="0.2500%" y="655.50">astar-pairwise-</text></g></svg></svg>