# Instructions for compiling:
# - A* Pairwise Aligner:
#   - cargo build --release
# - edlib:
#   - From this directory:
#   - cd ..
#   - Clone the fork, which contains an updated binary to handle the WFA input format.
#   - git clone https://github.com/RagnarGrootKoerkamp/edlib
#   - cd edlib/build
#   - cmake -D CMAKE_BUILD_TYPE=Release .. && make
# - WFA:
#   - From this directory:
#   - cd ..
#   - Clone the fork, which contains a fix to allow setting parameters to mimick edit distance.
#   - git clone https://github.com/RagnarGrootKoerkamp/WFA wfa
#   - cd wfa
#   - make clean all

import itertools
import shutil
import statistics

## LIMITS

# Timeout (cpu-time) in seconds, or 'unlimited'
TIMEOUT = 'unlimited'
# Memory limit (virtual memory) in KB, or 'unlimited'
MEMORY_LIMIT = 30000000

## TOOL DEFINITIONS
binaries = {
    'pa' : '../target/release/astar-pairwise-aligner',
    'edlib' : '../../edlib/meson-build/edlib-aligner',
    'wfa'   : '../../wfa2/bin/align_benchmark',
}
tool_command = {
    'sh':            binaries["pa"]      + ' -i {input} -o {stats_path} --silent2 -k {wildcards.k} -m {wildcards.m} --algorithm SH',
    'csh':           binaries["pa"]      + ' -i {input} -o {stats_path} --silent2 -k {wildcards.k} -m {wildcards.m} --algorithm CSH',
    # Slower variants for comparison
    'sh-noprune':    binaries["pa"]      + ' -i {input} -o {stats_path} --silent2 -k {wildcards.k} -m {wildcards.m} --algorithm SH  --no-prune',
    'csh-noprune':   binaries["pa"]      + ' -i {input} -o {stats_path} --silent2 -k {wildcards.k} -m {wildcards.m} --algorithm CSH --no-prune',
    'dijkstra':      binaries["pa"]      + ' -i {input} -o {stats_path} --silent2                                   --algorithm Dijkstra',
    # Others
    # We use a fork of edlib that takes the .seq files as input and processes pairs one by one.
    'edlib':         binaries["edlib"]   + ' -p -s {input}', # -p: compute the path, -s: no output
    'biwfa':         binaries["wfa" ]    + ' -i {input} -a edit-wfa --wfa-memory-mode ultralow',
}

# Command to generate testcases.
generate_command    = '../target/release/examples/generate_dataset -x {wildcards.cnt} -n {wildcards.n} -e {wildcards.e} -o {output}'

# Wrap `command` in a small shell script than handles timeouts.
# Writes the exit status into `status_path`.
def timeout(command, status_path):
    return f"""
ulimit -t {TIMEOUT}
ulimit -v {MEMORY_LIMIT}
# Allow the command to fail.
set +e
{command}
exit_code=$?
set -e
# Normal exit
if [ $exit_code -eq 0 ] ; then
    echo ok > {status_path}
    exit 0
fi
if [ $exit_code -eq 124 ] ; then
    echo timeout {TIMEOUT} > {status_path}
    exit 0
fi
# Handle out of memory (OOM);
# typically from SIGKILL (137) (when killed by linux) or SIGSEGV (139) or SIGABRT (134)
if [ $exit_code -eq 137 ] || [ $exit_code -eq 139 ] || [ $exit_code -eq 134 ]; then
    echo out-of-memory {MEMORY_LIMIT} $exit_code > {status_path}
    exit 0
fi
echo Unexpected exit status $exit_code
# Fail with an error.
exit 1
"""

wildcard_constraints:
    # Error rates start with a digit.
    e="[0-9.]+",
    # Tool names do not start with a digit.
    tool='[^.0-9]*'

## WRAPPER CLASSES

# An input is a generated file containing test sequences.
class Input:
    # An input dataset is given by:
    def __init__(self, **kwargs):
        # The number of sequence pairs.
        self.cnt = int(kwargs['cnt'])
        # The length of each sequence.
        self.n = int(kwargs['n'])
        # The error rate.
        self.e = float(kwargs['e'])

    # The wildcard string used for pattern matches.
    def name_pattern():
        return 'x{cnt}-n{n}-e{e}'
    # The wildcard pattern for an input file.
    def pattern():
        return f'input/synthetic/{Input.name_pattern(ont)}.seq'

    # The name of this input file.
    def name(self):
        return Path(f'x{self.cnt}-n{self.n}-e{self.e}')
    # The path of this input file.
    def path(self):
        return Path(f'input/synthetic/{self.name()}.seq')


# A run is an execution of a tool (with optional parameters) on an input.
# The most important part is the bench_path, which is where Snakemake will write the timings.
class Run:
    # A run consists of an input and tool, and optionally m and k parameters.
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
        self.has_params = 'k' in kwargs and 'm' in kwargs
    # The wildcard pattern for an run benchmark with parameters.
    def pattern_with_params():
        return f'runs/{Input.name_pattern()}-A{{tool}}-m{{m}}-k{{k}}.bench'
    # The wildcard pattern for an run benchmark without parameters.
    def pattern():
        return f'runs/{Input.name_pattern()}-A{{tool}}.bench'
    # The benchmark path of this run.
    def bench_path(self):
        if self.has_params:
            return Path(f'runs/{self.input.name()}-A{self.tool}-m{self.m}-k{self.k}.bench')
        else:
            return Path(f'runs/{self.input.name()}-A{self.tool}.bench')
    # The status path of this run, where the exit status is written after success/timeout/out-of-memory.
    def status_path(self):
        return self.bench_path().with_suffix('.status')
    # The stats path of this run, where A*PA writes additional statistics.
    def stats_path(self):
        return self.bench_path().with_suffix('.stats')

# === GENERATE INPUT ===

rule generate_input:
    # Input generation has priority over other rules, so that all inputs are
    # generated at the start.
    priority: 2
    output: Input.pattern()
    shell: generate_command

# === RULES TO RUN ON TESTCASES ===

# Given a set of wildcards (input specs, tool, parameters), return the command to run.
def build_command(w):
    input = Input(**w)
    run = Run(input=input, **w)
    command = tool_command[w.tool].format(input=input.path(), e=input.e, wildcards=w, status_path=run.status_path(), stats_path=run.stats_path())
    return timeout(command, run.status_path())

# Benchmark the tool inferred from the parameters.
rule benchmark_tool:
    input: lambda w: Input(**w).path()
    benchmark: Run.pattern_with_params()
    params: command = lambda w: build_command(w)
    shell: '{params.command}'

# === TABLE CONSTRUCTION ===

# Collect all run files into a single tsv:
# - input parameters
# - .bench file
# - .status file
# - .stats file if present
def make_table(runs, output):
    headers = ["alg","model", "cnt","n","e","m","k","s","h:m:s","max_rss","max_vms","max_uss","max_pss","io_in","io_out","mean_load","cpu_time", "exit_status"]
    table_file = Path(output[0]).open('w')

    found_headers = False
    for run in runs:
        if run.stats_path().is_file():
            pa_headers = run.stats_path().read_text().splitlines()[0]
            table_file.write("\t".join(headers) + '\t' + pa_headers + '\n')
            found_headers = True
            break
    if not found_headers:
        table_file.write("\t".join(headers) + '\n')

    for run in runs:
        status = run.status_path().read_text().strip()
        try:
            stats = '\t' + run.stats_path().read_text().splitlines()[1]
        except:
            stats = ''
        for bench_line in run.bench_path().read_text().splitlines()[1:]:
            table_file.write(f'{run.tool}\t{run.input.model}\t{run.input.cnt}\t{run.input.n}\t{run.input.e}\t{getattr(run, "m", "")}\t{getattr(run, "k", "")}\t{bench_line}\t{status}{stats}\n')

# === TOOL COMPARISON ===

# Returns the list of runs for the tool comparison table.
def tools_runs():
    N = 10**7
    ns = [3_000, 10_000, 30_000, 100_000, 300_000, 1_000_000, 3_000_000, 10_000_000]
    es = [0.01, 0.05, 0.10, 0.15]
    tools = ['edlib', 'biwfa', 'sh', 'csh']
    inputs = [Input(cnt=N//n, n=n, e=e) for n in ns for e in es if N//n > 0]
    return [Run(input=input,
                tool=tool,
                k=15,
                # NOTE: exact matches are used for e < 10%, and inexact matches for e >= 10%.
                m=0 if e < 0.1 else 1)
            for input in inputs
            for tool in tools]

rule tools_table:
    input: lambda w: [run.bench_path() for run in tools_runs()]
    output: 'table/tools.tsv'
    run: make_table(tools_runs(), output)

# === SCALING WITH N ===

# Returns the list of runs for the scaling with n comparison with and without pruning.
def scaling_n_runs():
    ns = [100, 300, 1000, 3000, 10_000, 30_000, 100_000]
    es = [0.05]
    ms = [0]
    ks = [15]
    # Split tools into two groups using a different N.
    fast_N = 10**7
    slow_N = 10**5
    fast_tools = ['sh', 'csh']
    slow_tools = ['sh-noprune', 'csh-noprune']
    fast_inputs = [Input(cnt=fast_N//n, n=n, e=e) for n in ns for e in es if fast_N//n > 0]
    slow_inputs = [Input(cnt=slow_N//n, n=n, e=e) for n in ns for e in es if slow_N//n > 0]
    # Dijkstra is separate because it does not use parameters.
    dijkstra_runs = [Run(input=input, tool=tool)
                        for input in slow_inputs
                        for tool in ['dijkstra']]
    fast_runs = [Run(input=input, tool=tool, m=m, k=k)
                        for k in ks
                        for m in ms
                        for input in fast_inputs
                        for tool in fast_tools]
    slow_runs = [Run(input=input, tool=tool, m=m, k=k)
                        for k in ks
                        for m in ms
                        for input in slow_inputs
                        for tool in slow_tools]
    return fast_runs + slow_runs + dijkstra_runs

rule scaling_n_table:
    input: lambda w: [run.bench_path() for run in scaling_n_runs()]
    output: 'table/scaling_n.tsv'
    run: make_table(scaling_n_runs(), output)

# === SCALING WITH E ===

# Returns the list of runs for scaling with e, with exact and inexact matches.
def scaling_e_runs(N):
    N = int(float(N))
    ns = [10000]
    es = [0.01] + [x/100 for x in range(2, 35, 2)]
    ms = [0, 1]
    ks = [9]
    tools = ['sh', 'csh']

    inputs = [Input(cnt=N//n, n=n, e=e) for n in ns for e in es if N//n > 0]
    # Dijkstra is separate because it does not use parameters.
    dijkstra_runs = [Run(input=input, tool=tool)
                        for input in inputs
                        for tool in ['dijkstra']]
    our_runs = [Run(input=input, tool=tool, m=m, k=k)
                        for k in ks
                        for m in ms
                        for input in inputs
                        for tool in tools]
    return dijkstra_runs + our_runs

rule scaling_e_table:
    input: lambda w: [run.bench_path() for run in scaling_e_runs(w.N)]
    output: 'table/scaling_e_N{N}.tsv'
    run: make_table(scaling_e_runs(wildcards.N), output)

################################################################################
# Everything below here should move elsewhere.

# ==== ONT Runs ==== #

ont_ns = [100_000, 300_000, 1_000_000]
ont_models = ['random', 'human']
ont_kms = [(14, 1), (15, 1), (16, 1), (17, 1)]

# This runs on 3 types of data:
# - synthetic data
# - random sequences with ONT errors
# - human sequences with ONT errors
def ont_inputs(N):
    N = int(float(N))
    return ([Input(cnt=N//n, n=n, e=0.1) for n in ont_ns if N//n > 0]
            + [Input(model=model, cnt=N//n, n=n) for n in ont_ns for model in ont_models if N//n > 0])

# Run PA with given parameters.
rule ont_run_pa_for_parameters:
    input: lambda w: Input(**w).path()
    benchmark: Run.pattern_with_params(ont=True)
    params: command = lambda w: build_command(w, params=True)
    shell: '{params.command}'

rule ont_params_table:
    input: lambda w: [run.bench_path() for run in params_runs(tools_cp, ont_inputs(w.N), ont=True)]
    output: 'table/params_ont_N{N}.tsv'
    run: make_table(params_runs(tools_cp, ont_inputs(wildcards.N), ont=True), output)

rule ont_tools_table:
    input: lambda w: [run.bench_path() for run in tool_runs(tools, ont_inputs(w.N))]
    output: 'table/tools_ont_N{N}.tsv'
    run: make_table(tool_runs(tools, ont_inputs(wildcards.N)), output)


# ======= Reference ======= #
rule human_reference:
    #output: f'input/reference/human.fa'
    shell: '''
    wget -P input/reference http://ftp.ensembl.org/pub/release-106/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
    gunzip --keep input/reference/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz {output}
    # Make .fai
    samtools faidx {output}
    '''

# ======= Nanosim data ======= #

rule nanosim:
    output: 'input/simulated/{ref}-x{x}-n{n}.seq'
    input: 'input/reference/{ref}.fa'
    threads: 8
    params:
        min = lambda w: int(w.n)*3//4,
        max = lambda w: int(w.n)*5//4,
        seed = 31415,
        # Generate a few more sequences, so that we have some room for filtering (unaligned, and N regions).
        generate_x = lambda w: int(w.x) * 3 // 2
    # NOTE: Run this in a conda env with nanosim loaded.
    # TODO: Add this info to the snakefile.
    # TODO: Fix path to the nanosim datafiles.
    shell: '''
    # Run the simulator to generate a .fa file.
    simulator.py genome \
      --ref_g input/reference/{wildcards.ref}.fa \
      --output input/simulated/{wildcards.ref}-x{wildcards.x}-n{wildcards.n} \
      -dna_type linear \
      --model_prefix ../../nanosim/pre-trained_models/human_NA12878_DNA_FAB49712_guppy/training \
      --min_len {params.min} \
      --median_len {wildcards.n} \
      --max_len {params.max} \
      --sd_len 1.05 \
      --number {params.generate_x} \
      --strandness 1 \
      --seed 314151 \
      --num_threads 8
    # Convert to a .seq file,
    ../target/release/examples/nanosim_to_seq \
      --reference input/reference/{wildcards.ref}.fa \
      --reads input/simulated/{wildcards.ref}-x{wildcards.x}-n{wildcards.n}_aligned_reads.fasta \
      --output input/simulated/{wildcards.ref}-x{wildcards.x}-n{wildcards.n}.seq \
      --count {wildcards.x} \
      --strip-unaligned
    '''

#
# simulator.py genome
# -rg ../reads/reference/GRCh38_full_analysis_set_plus_decoy_hla.fa
# -dna_type linear
# -c ../../../../nanosim/pre-trained_models/human_NA12878_DNA_FAB49712_guppy/training
# -min  750000
# -max 12500000
# -med 1000000
# -sd 1.05
# -n10
# -s 1
# --seed 31415




# ================ BELOW HERE IS unused AND untested REAL DATA =================== #

# Nanopore / Illumina data is here: https://github.com/Daniel-Liu-c0deb0t/block-aligner/releases

# ONT long reads
# Block aligner uses data from the
# Whole Human Genome Sequencing Project
# Data sources: https://github.com/nanopore-wgs-consortium/NA12878/blob/master/nanopore-human-genome/rel_3_4.md

# Download reference genome.
# Gets the entire directory, but not subdirectories.
REFERENCE_FTP = 'ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/reference/GRCh38_reference_genome/'
REFERENCE2_DIR = 'input/reads/reference'
REFERENCE_NAME = f'{REFERENCE2_DIR}/GRCh38_full_analysis_set_plus_decoy_hla.fa'
rule download_reference:
    output: REFERENCE_NAME
    shell: f'wget -r -nH -nc -l 1 -P {REFERENCE2_DIR} --cut-dirs=5 {REFERENCE_FTP}'


# Download reads
# [(flowcel id, fasta url, bam url, bai url)]
FLOWCELLS = {
    'FAB45271': 'nanopore-human-wgs/rel3-nanopore-wgs-152889212-FAB45271.fastq.gz',
    'FAB42316': 'nanopore-human-wgs/rel3-nanopore-wgs-216722908-FAB42316.fastq.gz',
    'FAB49164': 'nanopore-human-wgs/rel3-nanopore-wgs-4045668814-FAB49164.fastq.gz',
}

# Copy from AWS S3.
# Using AWS CLI is faster, but needs an AWS account and aws CLI set up and linked to your account.
rule read:
    output: 'input/reads/{id}.fastq.gz'
    run:
        path = FLOWCELLS[wildcards.id]
        #shell('wget -O {output} http://s3.amazonaws.com/{path}')
        shell('aws configure set default.s3.max_concurrent_requests 20')
        shell('aws s3 cp s3://{path} {output}')

rule read_bam:
    output: 'input/reads/{id}.fastq.gz.sorted.bam'
    run:
        path = FLOWCELLS[wildcards.id] + '.sorted.bam'
        for ext in ['', '.bai']:
            #shell('wget -O {output}{ext} http://s3.amazonaws.com/{path}{ext}')
            shell('aws configure set default.s3.max_concurrent_requests 20')
            shell('aws s3 cp s3://{path}{ext} {output}{ext}')

rule download_reads:
    input: [f'input/reads/{id}.fastq.gz{ext}' for ext in ['', '.sorted.bam'] for id in FLOWCELLS]

# Make .bed file containing reference locations of reads in .bam file:
rule bed_file:
    input: 'input/reads/{id}.fastq.gz.sorted.bam'
    output: 'input/reads/{id}.bed'
    shell: 'bedtools bamtobed -i input/reads{id}.fastq.gz.sorted.bam > {output}'

# Extract parts of reference corresponding to reads:
rule extract_reference:
    input: ['input/reads/{id}.bed', REFERENCE_NAME]
    output: 'input/reads/{id}.mapped.fa'
    # -s: reverse-complement the reference when needed
    shell: 'bedtools getfasta -s -nameOnly -fi {REFERENCE_NAME}  -bed input/reads/{id}.bed > {output}'

# Reads are in the original .fasta.gz file, or can be extracted using
# samtools fasta {id}.fastq.gz.sorted.bam
# View the bam entry for a read with
# samtools view {read_id}

# Large (500k+) read set from BiWFA paper:
rule download_ont_500k:
    output: 'input/downloads/ont_500k.zip'
    shell: 'wget -O {output} https://github.com/smarco/BiWFA-paper/blob/main/evaluation/data/ONT_MinION_UL.500kbps.zip?raw=true'
rule ont_500k:
    input: 'input/downloads/ont_500k.zip'
    output: 'input/ont_500k/all.seq'
    params: dir = "input/ont_500k/"
    shell: '''
    mkdir -p input/ont_500k/
    unzip {input} -d {params.dir}
    cat {params.dir}/* > {output}
    '''
